// Code generated by ent, DO NOT EDIT.

package ent

import (
	"gojeksrepo/ent/driverprofile"
	"gojeksrepo/ent/payment"
	"gojeksrepo/ent/schema"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/triprating"
	"gojeksrepo/ent/user"
	"gojeksrepo/ent/wallet"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	driverprofileFields := schema.DriverProfile{}.Fields()
	_ = driverprofileFields
	// driverprofileDescIsActive is the schema descriptor for is_active field.
	driverprofileDescIsActive := driverprofileFields[7].Descriptor()
	// driverprofile.DefaultIsActive holds the default value on creation for the is_active field.
	driverprofile.DefaultIsActive = driverprofileDescIsActive.Default.(bool)
	// driverprofileDescID is the schema descriptor for id field.
	driverprofileDescID := driverprofileFields[0].Descriptor()
	// driverprofile.DefaultID holds the default value on creation for the id field.
	driverprofile.DefaultID = driverprofileDescID.Default.(func() uuid.UUID)
	paymentFields := schema.Payment{}.Fields()
	_ = paymentFields
	// paymentDescPaymentMethod is the schema descriptor for payment_method field.
	paymentDescPaymentMethod := paymentFields[3].Descriptor()
	// payment.PaymentMethodValidator is a validator for the "payment_method" field. It is called by the builders before save.
	payment.PaymentMethodValidator = paymentDescPaymentMethod.Validators[0].(func(string) error)
	// paymentDescID is the schema descriptor for id field.
	paymentDescID := paymentFields[0].Descriptor()
	// payment.DefaultID holds the default value on creation for the id field.
	payment.DefaultID = paymentDescID.Default.(func() uuid.UUID)
	tripFields := schema.Trip{}.Fields()
	_ = tripFields
	// tripDescIsPaid is the schema descriptor for is_paid field.
	tripDescIsPaid := tripFields[10].Descriptor()
	// trip.DefaultIsPaid holds the default value on creation for the is_paid field.
	trip.DefaultIsPaid = tripDescIsPaid.Default.(bool)
	// tripDescCreatedAt is the schema descriptor for created_at field.
	tripDescCreatedAt := tripFields[11].Descriptor()
	// trip.DefaultCreatedAt holds the default value on creation for the created_at field.
	trip.DefaultCreatedAt = tripDescCreatedAt.Default.(time.Time)
	// tripDescID is the schema descriptor for id field.
	tripDescID := tripFields[0].Descriptor()
	// trip.DefaultID holds the default value on creation for the id field.
	trip.DefaultID = tripDescID.Default.(func() uuid.UUID)
	tripratingFields := schema.TripRating{}.Fields()
	_ = tripratingFields
	// tripratingDescComment is the schema descriptor for comment field.
	tripratingDescComment := tripratingFields[5].Descriptor()
	// triprating.DefaultComment holds the default value on creation for the comment field.
	triprating.DefaultComment = tripratingDescComment.Default.(string)
	// tripratingDescCreatedAt is the schema descriptor for created_at field.
	tripratingDescCreatedAt := tripratingFields[6].Descriptor()
	// triprating.DefaultCreatedAt holds the default value on creation for the created_at field.
	triprating.DefaultCreatedAt = tripratingDescCreatedAt.Default.(time.Time)
	// tripratingDescID is the schema descriptor for id field.
	tripratingDescID := tripratingFields[0].Descriptor()
	// triprating.DefaultID holds the default value on creation for the id field.
	triprating.DefaultID = tripratingDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for phone field.
	userDescPhone := userFields[3].Descriptor()
	// user.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescIsVerified is the schema descriptor for is_verified field.
	userDescIsVerified := userFields[6].Descriptor()
	// user.DefaultIsVerified holds the default value on creation for the is_verified field.
	user.DefaultIsVerified = userDescIsVerified.Default.(bool)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[7].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
	walletFields := schema.Wallet{}.Fields()
	_ = walletFields
	// walletDescID is the schema descriptor for id field.
	walletDescID := walletFields[0].Descriptor()
	// wallet.DefaultID holds the default value on creation for the id field.
	wallet.DefaultID = walletDescID.Default.(func() uuid.UUID)
}
