// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gojeksrepo/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Role holds the value of the "role" field.
	Role user.Role `json:"role,omitempty"`
	// IsVerified holds the value of the "is_verified" field.
	IsVerified bool `json:"is_verified,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// UserTrips holds the value of the user_trips edge.
	UserTrips []*Trip `json:"user_trips,omitempty"`
	// Payments holds the value of the payments edge.
	Payments []*Payment `json:"payments,omitempty"`
	// UserBalance holds the value of the user_balance edge.
	UserBalance []*Wallet `json:"user_balance,omitempty"`
	// GivenRatings holds the value of the given_ratings edge.
	GivenRatings []*TripRating `json:"given_ratings,omitempty"`
	// ReceivedRatings holds the value of the received_ratings edge.
	ReceivedRatings []*TripRating `json:"received_ratings,omitempty"`
	// UserDriver holds the value of the user_driver edge.
	UserDriver []*DriverProfile `json:"user_driver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// UserTripsOrErr returns the UserTrips value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserTripsOrErr() ([]*Trip, error) {
	if e.loadedTypes[0] {
		return e.UserTrips, nil
	}
	return nil, &NotLoadedError{edge: "user_trips"}
}

// PaymentsOrErr returns the Payments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PaymentsOrErr() ([]*Payment, error) {
	if e.loadedTypes[1] {
		return e.Payments, nil
	}
	return nil, &NotLoadedError{edge: "payments"}
}

// UserBalanceOrErr returns the UserBalance value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserBalanceOrErr() ([]*Wallet, error) {
	if e.loadedTypes[2] {
		return e.UserBalance, nil
	}
	return nil, &NotLoadedError{edge: "user_balance"}
}

// GivenRatingsOrErr returns the GivenRatings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GivenRatingsOrErr() ([]*TripRating, error) {
	if e.loadedTypes[3] {
		return e.GivenRatings, nil
	}
	return nil, &NotLoadedError{edge: "given_ratings"}
}

// ReceivedRatingsOrErr returns the ReceivedRatings value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ReceivedRatingsOrErr() ([]*TripRating, error) {
	if e.loadedTypes[4] {
		return e.ReceivedRatings, nil
	}
	return nil, &NotLoadedError{edge: "received_ratings"}
}

// UserDriverOrErr returns the UserDriver value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserDriverOrErr() ([]*DriverProfile, error) {
	if e.loadedTypes[5] {
		return e.UserDriver, nil
	}
	return nil, &NotLoadedError{edge: "user_driver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsVerified:
			values[i] = new(sql.NullBool)
		case user.FieldName, user.FieldEmail, user.FieldPhone, user.FieldPassword, user.FieldRole:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = user.Role(value.String)
			}
		case user.FieldIsVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_verified", values[i])
			} else if value.Valid {
				u.IsVerified = value.Bool
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryUserTrips queries the "user_trips" edge of the User entity.
func (u *User) QueryUserTrips() *TripQuery {
	return NewUserClient(u.config).QueryUserTrips(u)
}

// QueryPayments queries the "payments" edge of the User entity.
func (u *User) QueryPayments() *PaymentQuery {
	return NewUserClient(u.config).QueryPayments(u)
}

// QueryUserBalance queries the "user_balance" edge of the User entity.
func (u *User) QueryUserBalance() *WalletQuery {
	return NewUserClient(u.config).QueryUserBalance(u)
}

// QueryGivenRatings queries the "given_ratings" edge of the User entity.
func (u *User) QueryGivenRatings() *TripRatingQuery {
	return NewUserClient(u.config).QueryGivenRatings(u)
}

// QueryReceivedRatings queries the "received_ratings" edge of the User entity.
func (u *User) QueryReceivedRatings() *TripRatingQuery {
	return NewUserClient(u.config).QueryReceivedRatings(u)
}

// QueryUserDriver queries the "user_driver" edge of the User entity.
func (u *User) QueryUserDriver() *DriverProfileQuery {
	return NewUserClient(u.config).QueryUserDriver(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(u.Phone)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", ")
	builder.WriteString("is_verified=")
	builder.WriteString(fmt.Sprintf("%v", u.IsVerified))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
