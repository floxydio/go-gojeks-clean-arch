// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldIsVerified holds the string denoting the is_verified field in the database.
	FieldIsVerified = "is_verified"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUserTrips holds the string denoting the user_trips edge name in mutations.
	EdgeUserTrips = "user_trips"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// EdgeUserBalance holds the string denoting the user_balance edge name in mutations.
	EdgeUserBalance = "user_balance"
	// EdgeGivenRatings holds the string denoting the given_ratings edge name in mutations.
	EdgeGivenRatings = "given_ratings"
	// EdgeReceivedRatings holds the string denoting the received_ratings edge name in mutations.
	EdgeReceivedRatings = "received_ratings"
	// EdgeUserDriver holds the string denoting the user_driver edge name in mutations.
	EdgeUserDriver = "user_driver"
	// Table holds the table name of the user in the database.
	Table = "users"
	// UserTripsTable is the table that holds the user_trips relation/edge.
	UserTripsTable = "trips"
	// UserTripsInverseTable is the table name for the Trip entity.
	// It exists in this package in order to avoid circular dependency with the "trip" package.
	UserTripsInverseTable = "trips"
	// UserTripsColumn is the table column denoting the user_trips relation/edge.
	UserTripsColumn = "user_id"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "payments"
	// PaymentsInverseTable is the table name for the Payment entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	PaymentsInverseTable = "payments"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "user_id"
	// UserBalanceTable is the table that holds the user_balance relation/edge.
	UserBalanceTable = "wallets"
	// UserBalanceInverseTable is the table name for the Wallet entity.
	// It exists in this package in order to avoid circular dependency with the "wallet" package.
	UserBalanceInverseTable = "wallets"
	// UserBalanceColumn is the table column denoting the user_balance relation/edge.
	UserBalanceColumn = "user_id"
	// GivenRatingsTable is the table that holds the given_ratings relation/edge.
	GivenRatingsTable = "trip_ratings"
	// GivenRatingsInverseTable is the table name for the TripRating entity.
	// It exists in this package in order to avoid circular dependency with the "triprating" package.
	GivenRatingsInverseTable = "trip_ratings"
	// GivenRatingsColumn is the table column denoting the given_ratings relation/edge.
	GivenRatingsColumn = "from_user_id"
	// ReceivedRatingsTable is the table that holds the received_ratings relation/edge.
	ReceivedRatingsTable = "trip_ratings"
	// ReceivedRatingsInverseTable is the table name for the TripRating entity.
	// It exists in this package in order to avoid circular dependency with the "triprating" package.
	ReceivedRatingsInverseTable = "trip_ratings"
	// ReceivedRatingsColumn is the table column denoting the received_ratings relation/edge.
	ReceivedRatingsColumn = "to_user_id"
	// UserDriverTable is the table that holds the user_driver relation/edge.
	UserDriverTable = "driver_profiles"
	// UserDriverInverseTable is the table name for the DriverProfile entity.
	// It exists in this package in order to avoid circular dependency with the "driverprofile" package.
	UserDriverInverseTable = "driver_profiles"
	// UserDriverColumn is the table column denoting the user_driver relation/edge.
	UserDriverColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPhone,
	FieldPassword,
	FieldRole,
	FieldIsVerified,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultIsVerified holds the default value on creation for the "is_verified" field.
	DefaultIsVerified bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleUser   Role = "user"
	RoleDriver Role = "driver"
	RoleAdmin  Role = "admin"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleUser, RoleDriver, RoleAdmin:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByIsVerified orders the results by the is_verified field.
func ByIsVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVerified, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserTripsCount orders the results by user_trips count.
func ByUserTripsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserTripsStep(), opts...)
	}
}

// ByUserTrips orders the results by user_trips terms.
func ByUserTrips(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserTripsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPaymentsCount orders the results by payments count.
func ByPaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentsStep(), opts...)
	}
}

// ByPayments orders the results by payments terms.
func ByPayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserBalanceCount orders the results by user_balance count.
func ByUserBalanceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserBalanceStep(), opts...)
	}
}

// ByUserBalance orders the results by user_balance terms.
func ByUserBalance(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserBalanceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGivenRatingsCount orders the results by given_ratings count.
func ByGivenRatingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGivenRatingsStep(), opts...)
	}
}

// ByGivenRatings orders the results by given_ratings terms.
func ByGivenRatings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGivenRatingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReceivedRatingsCount orders the results by received_ratings count.
func ByReceivedRatingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReceivedRatingsStep(), opts...)
	}
}

// ByReceivedRatings orders the results by received_ratings terms.
func ByReceivedRatings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReceivedRatingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserDriverCount orders the results by user_driver count.
func ByUserDriverCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserDriverStep(), opts...)
	}
}

// ByUserDriver orders the results by user_driver terms.
func ByUserDriver(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserDriverStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserTripsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserTripsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserTripsTable, UserTripsColumn),
	)
}
func newPaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
	)
}
func newUserBalanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserBalanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserBalanceTable, UserBalanceColumn),
	)
}
func newGivenRatingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GivenRatingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GivenRatingsTable, GivenRatingsColumn),
	)
}
func newReceivedRatingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReceivedRatingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReceivedRatingsTable, ReceivedRatingsColumn),
	)
}
func newUserDriverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserDriverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserDriverTable, UserDriverColumn),
	)
}
