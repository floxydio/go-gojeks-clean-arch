// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gojeksrepo/ent/driverprofile"
	"gojeksrepo/ent/payment"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/triprating"
	"gojeksrepo/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TripCreate is the builder for creating a Trip entity.
type TripCreate struct {
	config
	mutation *TripMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (tc *TripCreate) SetUserID(u uuid.UUID) *TripCreate {
	tc.mutation.SetUserID(u)
	return tc
}

// SetDriverID sets the "driver_id" field.
func (tc *TripCreate) SetDriverID(u uuid.UUID) *TripCreate {
	tc.mutation.SetDriverID(u)
	return tc
}

// SetNillableDriverID sets the "driver_id" field if the given value is not nil.
func (tc *TripCreate) SetNillableDriverID(u *uuid.UUID) *TripCreate {
	if u != nil {
		tc.SetDriverID(*u)
	}
	return tc
}

// SetPickupLat sets the "pickup_lat" field.
func (tc *TripCreate) SetPickupLat(f float64) *TripCreate {
	tc.mutation.SetPickupLat(f)
	return tc
}

// SetPickupLong sets the "pickup_long" field.
func (tc *TripCreate) SetPickupLong(f float64) *TripCreate {
	tc.mutation.SetPickupLong(f)
	return tc
}

// SetDropLat sets the "drop_lat" field.
func (tc *TripCreate) SetDropLat(f float64) *TripCreate {
	tc.mutation.SetDropLat(f)
	return tc
}

// SetDropLong sets the "drop_long" field.
func (tc *TripCreate) SetDropLong(f float64) *TripCreate {
	tc.mutation.SetDropLong(f)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TripCreate) SetStatus(t trip.Status) *TripCreate {
	tc.mutation.SetStatus(t)
	return tc
}

// SetDistanceKm sets the "distance_km" field.
func (tc *TripCreate) SetDistanceKm(f float64) *TripCreate {
	tc.mutation.SetDistanceKm(f)
	return tc
}

// SetNillableDistanceKm sets the "distance_km" field if the given value is not nil.
func (tc *TripCreate) SetNillableDistanceKm(f *float64) *TripCreate {
	if f != nil {
		tc.SetDistanceKm(*f)
	}
	return tc
}

// SetNumeric sets the "numeric" field.
func (tc *TripCreate) SetNumeric(s string) *TripCreate {
	tc.mutation.SetNumeric(s)
	return tc
}

// SetNillableNumeric sets the "numeric" field if the given value is not nil.
func (tc *TripCreate) SetNillableNumeric(s *string) *TripCreate {
	if s != nil {
		tc.SetNumeric(*s)
	}
	return tc
}

// SetIsPaid sets the "is_paid" field.
func (tc *TripCreate) SetIsPaid(b bool) *TripCreate {
	tc.mutation.SetIsPaid(b)
	return tc
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (tc *TripCreate) SetNillableIsPaid(b *bool) *TripCreate {
	if b != nil {
		tc.SetIsPaid(*b)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TripCreate) SetCreatedAt(t time.Time) *TripCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableCreatedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetStartedAt sets the "started_at" field.
func (tc *TripCreate) SetStartedAt(t time.Time) *TripCreate {
	tc.mutation.SetStartedAt(t)
	return tc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableStartedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetStartedAt(*t)
	}
	return tc
}

// SetCompletedAt sets the "completed_at" field.
func (tc *TripCreate) SetCompletedAt(t time.Time) *TripCreate {
	tc.mutation.SetCompletedAt(t)
	return tc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tc *TripCreate) SetNillableCompletedAt(t *time.Time) *TripCreate {
	if t != nil {
		tc.SetCompletedAt(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TripCreate) SetID(u uuid.UUID) *TripCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TripCreate) SetNillableID(u *uuid.UUID) *TripCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// SetUser sets the "user" edge to the User entity.
func (tc *TripCreate) SetUser(u *User) *TripCreate {
	return tc.SetUserID(u.ID)
}

// SetDriver sets the "driver" edge to the DriverProfile entity.
func (tc *TripCreate) SetDriver(d *DriverProfile) *TripCreate {
	return tc.SetDriverID(d.ID)
}

// AddPaymentIDs adds the "payment" edge to the Payment entity by IDs.
func (tc *TripCreate) AddPaymentIDs(ids ...uuid.UUID) *TripCreate {
	tc.mutation.AddPaymentIDs(ids...)
	return tc
}

// AddPayment adds the "payment" edges to the Payment entity.
func (tc *TripCreate) AddPayment(p ...*Payment) *TripCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tc.AddPaymentIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the TripRating entity by IDs.
func (tc *TripCreate) AddRatingIDs(ids ...uuid.UUID) *TripCreate {
	tc.mutation.AddRatingIDs(ids...)
	return tc
}

// AddRatings adds the "ratings" edges to the TripRating entity.
func (tc *TripCreate) AddRatings(t ...*TripRating) *TripCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddRatingIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tc *TripCreate) Mutation() *TripMutation {
	return tc.mutation
}

// Save creates the Trip in the database.
func (tc *TripCreate) Save(ctx context.Context) (*Trip, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TripCreate) SaveX(ctx context.Context) *Trip {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TripCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TripCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TripCreate) defaults() {
	if _, ok := tc.mutation.IsPaid(); !ok {
		v := trip.DefaultIsPaid
		tc.mutation.SetIsPaid(v)
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := trip.DefaultCreatedAt
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := trip.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TripCreate) check() error {
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Trip.user_id"`)}
	}
	if _, ok := tc.mutation.PickupLat(); !ok {
		return &ValidationError{Name: "pickup_lat", err: errors.New(`ent: missing required field "Trip.pickup_lat"`)}
	}
	if _, ok := tc.mutation.PickupLong(); !ok {
		return &ValidationError{Name: "pickup_long", err: errors.New(`ent: missing required field "Trip.pickup_long"`)}
	}
	if _, ok := tc.mutation.DropLat(); !ok {
		return &ValidationError{Name: "drop_lat", err: errors.New(`ent: missing required field "Trip.drop_lat"`)}
	}
	if _, ok := tc.mutation.DropLong(); !ok {
		return &ValidationError{Name: "drop_long", err: errors.New(`ent: missing required field "Trip.drop_long"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Trip.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.IsPaid(); !ok {
		return &ValidationError{Name: "is_paid", err: errors.New(`ent: missing required field "Trip.is_paid"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Trip.created_at"`)}
	}
	if len(tc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Trip.user"`)}
	}
	return nil
}

func (tc *TripCreate) sqlSave(ctx context.Context) (*Trip, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TripCreate) createSpec() (*Trip, *sqlgraph.CreateSpec) {
	var (
		_node = &Trip{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(trip.Table, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.PickupLat(); ok {
		_spec.SetField(trip.FieldPickupLat, field.TypeFloat64, value)
		_node.PickupLat = value
	}
	if value, ok := tc.mutation.PickupLong(); ok {
		_spec.SetField(trip.FieldPickupLong, field.TypeFloat64, value)
		_node.PickupLong = value
	}
	if value, ok := tc.mutation.DropLat(); ok {
		_spec.SetField(trip.FieldDropLat, field.TypeFloat64, value)
		_node.DropLat = value
	}
	if value, ok := tc.mutation.DropLong(); ok {
		_spec.SetField(trip.FieldDropLong, field.TypeFloat64, value)
		_node.DropLong = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.DistanceKm(); ok {
		_spec.SetField(trip.FieldDistanceKm, field.TypeFloat64, value)
		_node.DistanceKm = value
	}
	if value, ok := tc.mutation.Numeric(); ok {
		_spec.SetField(trip.FieldNumeric, field.TypeString, value)
		_node.Numeric = value
	}
	if value, ok := tc.mutation.IsPaid(); ok {
		_spec.SetField(trip.FieldIsPaid, field.TypeBool, value)
		_node.IsPaid = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(trip.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.StartedAt(); ok {
		_spec.SetField(trip.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := tc.mutation.CompletedAt(); ok {
		_spec.SetField(trip.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if nodes := tc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DriverID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.PaymentTable,
			Columns: []string{trip.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.RatingsTable,
			Columns: []string{trip.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TripCreateBulk is the builder for creating many Trip entities in bulk.
type TripCreateBulk struct {
	config
	err      error
	builders []*TripCreate
}

// Save creates the Trip entities in the database.
func (tcb *TripCreateBulk) Save(ctx context.Context) ([]*Trip, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Trip, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TripMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TripCreateBulk) SaveX(ctx context.Context) []*Trip {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TripCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TripCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
