// Code generated by ent, DO NOT EDIT.

package trip

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the trip type in the database.
	Label = "trip"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDriverID holds the string denoting the driver_id field in the database.
	FieldDriverID = "driver_id"
	// FieldPickupLat holds the string denoting the pickup_lat field in the database.
	FieldPickupLat = "pickup_lat"
	// FieldPickupLong holds the string denoting the pickup_long field in the database.
	FieldPickupLong = "pickup_long"
	// FieldDropLat holds the string denoting the drop_lat field in the database.
	FieldDropLat = "drop_lat"
	// FieldDropLong holds the string denoting the drop_long field in the database.
	FieldDropLong = "drop_long"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDistanceKm holds the string denoting the distance_km field in the database.
	FieldDistanceKm = "distance_km"
	// FieldNumeric holds the string denoting the numeric field in the database.
	FieldNumeric = "numeric"
	// FieldIsPaid holds the string denoting the is_paid field in the database.
	FieldIsPaid = "is_paid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeDriver holds the string denoting the driver edge name in mutations.
	EdgeDriver = "driver"
	// EdgePayment holds the string denoting the payment edge name in mutations.
	EdgePayment = "payment"
	// EdgeRatings holds the string denoting the ratings edge name in mutations.
	EdgeRatings = "ratings"
	// Table holds the table name of the trip in the database.
	Table = "trips"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "trips"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// DriverTable is the table that holds the driver relation/edge.
	DriverTable = "trips"
	// DriverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	DriverInverseTable = "users"
	// DriverColumn is the table column denoting the driver relation/edge.
	DriverColumn = "driver_id"
	// PaymentTable is the table that holds the payment relation/edge.
	PaymentTable = "payments"
	// PaymentInverseTable is the table name for the Payment entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	PaymentInverseTable = "payments"
	// PaymentColumn is the table column denoting the payment relation/edge.
	PaymentColumn = "trip_id"
	// RatingsTable is the table that holds the ratings relation/edge.
	RatingsTable = "trip_ratings"
	// RatingsInverseTable is the table name for the TripRating entity.
	// It exists in this package in order to avoid circular dependency with the "triprating" package.
	RatingsInverseTable = "trip_ratings"
	// RatingsColumn is the table column denoting the ratings relation/edge.
	RatingsColumn = "trip_id"
)

// Columns holds all SQL columns for trip fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldDriverID,
	FieldPickupLat,
	FieldPickupLong,
	FieldDropLat,
	FieldDropLong,
	FieldStatus,
	FieldDistanceKm,
	FieldNumeric,
	FieldIsPaid,
	FieldCreatedAt,
	FieldStartedAt,
	FieldCompletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "trips"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"driver_profile_trips_driver",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsPaid holds the default value on creation for the "is_paid" field.
	DefaultIsPaid bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusRequested Status = "requested"
	StatusAccepted  Status = "accepted"
	StatusOngoing   Status = "ongoing"
	StatusCompleted Status = "completed"
	StatusCancelled Status = "cancelled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusRequested, StatusAccepted, StatusOngoing, StatusCompleted, StatusCancelled:
		return nil
	default:
		return fmt.Errorf("trip: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Trip queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByDriverID orders the results by the driver_id field.
func ByDriverID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDriverID, opts...).ToFunc()
}

// ByPickupLat orders the results by the pickup_lat field.
func ByPickupLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPickupLat, opts...).ToFunc()
}

// ByPickupLong orders the results by the pickup_long field.
func ByPickupLong(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPickupLong, opts...).ToFunc()
}

// ByDropLat orders the results by the drop_lat field.
func ByDropLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDropLat, opts...).ToFunc()
}

// ByDropLong orders the results by the drop_long field.
func ByDropLong(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDropLong, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDistanceKm orders the results by the distance_km field.
func ByDistanceKm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistanceKm, opts...).ToFunc()
}

// ByNumeric orders the results by the numeric field.
func ByNumeric(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumeric, opts...).ToFunc()
}

// ByIsPaid orders the results by the is_paid field.
func ByIsPaid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPaid, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByDriverField orders the results by driver field.
func ByDriverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDriverStep(), sql.OrderByField(field, opts...))
	}
}

// ByPaymentCount orders the results by payment count.
func ByPaymentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentStep(), opts...)
	}
}

// ByPayment orders the results by payment terms.
func ByPayment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRatingsCount orders the results by ratings count.
func ByRatingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRatingsStep(), opts...)
	}
}

// ByRatings orders the results by ratings terms.
func ByRatings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRatingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newDriverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DriverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DriverTable, DriverColumn),
	)
}
func newPaymentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentTable, PaymentColumn),
	)
}
func newRatingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RatingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RatingsTable, RatingsColumn),
	)
}
