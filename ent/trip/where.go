// Code generated by ent, DO NOT EDIT.

package trip

import (
	"gojeksrepo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldUserID, v))
}

// DriverID applies equality check predicate on the "driver_id" field. It's identical to DriverIDEQ.
func DriverID(v uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldDriverID, v))
}

// PickupLat applies equality check predicate on the "pickup_lat" field. It's identical to PickupLatEQ.
func PickupLat(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldPickupLat, v))
}

// PickupLong applies equality check predicate on the "pickup_long" field. It's identical to PickupLongEQ.
func PickupLong(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldPickupLong, v))
}

// DropLat applies equality check predicate on the "drop_lat" field. It's identical to DropLatEQ.
func DropLat(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldDropLat, v))
}

// DropLong applies equality check predicate on the "drop_long" field. It's identical to DropLongEQ.
func DropLong(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldDropLong, v))
}

// DistanceKm applies equality check predicate on the "distance_km" field. It's identical to DistanceKmEQ.
func DistanceKm(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldDistanceKm, v))
}

// Numeric applies equality check predicate on the "numeric" field. It's identical to NumericEQ.
func Numeric(v string) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldNumeric, v))
}

// IsPaid applies equality check predicate on the "is_paid" field. It's identical to IsPaidEQ.
func IsPaid(v bool) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldIsPaid, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldCreatedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldCompletedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldUserID, vs...))
}

// DriverIDEQ applies the EQ predicate on the "driver_id" field.
func DriverIDEQ(v uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldDriverID, v))
}

// DriverIDNEQ applies the NEQ predicate on the "driver_id" field.
func DriverIDNEQ(v uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldDriverID, v))
}

// DriverIDIn applies the In predicate on the "driver_id" field.
func DriverIDIn(vs ...uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldDriverID, vs...))
}

// DriverIDNotIn applies the NotIn predicate on the "driver_id" field.
func DriverIDNotIn(vs ...uuid.UUID) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldDriverID, vs...))
}

// DriverIDIsNil applies the IsNil predicate on the "driver_id" field.
func DriverIDIsNil() predicate.Trip {
	return predicate.Trip(sql.FieldIsNull(FieldDriverID))
}

// DriverIDNotNil applies the NotNil predicate on the "driver_id" field.
func DriverIDNotNil() predicate.Trip {
	return predicate.Trip(sql.FieldNotNull(FieldDriverID))
}

// PickupLatEQ applies the EQ predicate on the "pickup_lat" field.
func PickupLatEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldPickupLat, v))
}

// PickupLatNEQ applies the NEQ predicate on the "pickup_lat" field.
func PickupLatNEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldPickupLat, v))
}

// PickupLatIn applies the In predicate on the "pickup_lat" field.
func PickupLatIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldPickupLat, vs...))
}

// PickupLatNotIn applies the NotIn predicate on the "pickup_lat" field.
func PickupLatNotIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldPickupLat, vs...))
}

// PickupLatGT applies the GT predicate on the "pickup_lat" field.
func PickupLatGT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldPickupLat, v))
}

// PickupLatGTE applies the GTE predicate on the "pickup_lat" field.
func PickupLatGTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldPickupLat, v))
}

// PickupLatLT applies the LT predicate on the "pickup_lat" field.
func PickupLatLT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldPickupLat, v))
}

// PickupLatLTE applies the LTE predicate on the "pickup_lat" field.
func PickupLatLTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldPickupLat, v))
}

// PickupLongEQ applies the EQ predicate on the "pickup_long" field.
func PickupLongEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldPickupLong, v))
}

// PickupLongNEQ applies the NEQ predicate on the "pickup_long" field.
func PickupLongNEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldPickupLong, v))
}

// PickupLongIn applies the In predicate on the "pickup_long" field.
func PickupLongIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldPickupLong, vs...))
}

// PickupLongNotIn applies the NotIn predicate on the "pickup_long" field.
func PickupLongNotIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldPickupLong, vs...))
}

// PickupLongGT applies the GT predicate on the "pickup_long" field.
func PickupLongGT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldPickupLong, v))
}

// PickupLongGTE applies the GTE predicate on the "pickup_long" field.
func PickupLongGTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldPickupLong, v))
}

// PickupLongLT applies the LT predicate on the "pickup_long" field.
func PickupLongLT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldPickupLong, v))
}

// PickupLongLTE applies the LTE predicate on the "pickup_long" field.
func PickupLongLTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldPickupLong, v))
}

// DropLatEQ applies the EQ predicate on the "drop_lat" field.
func DropLatEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldDropLat, v))
}

// DropLatNEQ applies the NEQ predicate on the "drop_lat" field.
func DropLatNEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldDropLat, v))
}

// DropLatIn applies the In predicate on the "drop_lat" field.
func DropLatIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldDropLat, vs...))
}

// DropLatNotIn applies the NotIn predicate on the "drop_lat" field.
func DropLatNotIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldDropLat, vs...))
}

// DropLatGT applies the GT predicate on the "drop_lat" field.
func DropLatGT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldDropLat, v))
}

// DropLatGTE applies the GTE predicate on the "drop_lat" field.
func DropLatGTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldDropLat, v))
}

// DropLatLT applies the LT predicate on the "drop_lat" field.
func DropLatLT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldDropLat, v))
}

// DropLatLTE applies the LTE predicate on the "drop_lat" field.
func DropLatLTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldDropLat, v))
}

// DropLongEQ applies the EQ predicate on the "drop_long" field.
func DropLongEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldDropLong, v))
}

// DropLongNEQ applies the NEQ predicate on the "drop_long" field.
func DropLongNEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldDropLong, v))
}

// DropLongIn applies the In predicate on the "drop_long" field.
func DropLongIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldDropLong, vs...))
}

// DropLongNotIn applies the NotIn predicate on the "drop_long" field.
func DropLongNotIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldDropLong, vs...))
}

// DropLongGT applies the GT predicate on the "drop_long" field.
func DropLongGT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldDropLong, v))
}

// DropLongGTE applies the GTE predicate on the "drop_long" field.
func DropLongGTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldDropLong, v))
}

// DropLongLT applies the LT predicate on the "drop_long" field.
func DropLongLT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldDropLong, v))
}

// DropLongLTE applies the LTE predicate on the "drop_long" field.
func DropLongLTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldDropLong, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldStatus, vs...))
}

// DistanceKmEQ applies the EQ predicate on the "distance_km" field.
func DistanceKmEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldDistanceKm, v))
}

// DistanceKmNEQ applies the NEQ predicate on the "distance_km" field.
func DistanceKmNEQ(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldDistanceKm, v))
}

// DistanceKmIn applies the In predicate on the "distance_km" field.
func DistanceKmIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldDistanceKm, vs...))
}

// DistanceKmNotIn applies the NotIn predicate on the "distance_km" field.
func DistanceKmNotIn(vs ...float64) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldDistanceKm, vs...))
}

// DistanceKmGT applies the GT predicate on the "distance_km" field.
func DistanceKmGT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldDistanceKm, v))
}

// DistanceKmGTE applies the GTE predicate on the "distance_km" field.
func DistanceKmGTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldDistanceKm, v))
}

// DistanceKmLT applies the LT predicate on the "distance_km" field.
func DistanceKmLT(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldDistanceKm, v))
}

// DistanceKmLTE applies the LTE predicate on the "distance_km" field.
func DistanceKmLTE(v float64) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldDistanceKm, v))
}

// DistanceKmIsNil applies the IsNil predicate on the "distance_km" field.
func DistanceKmIsNil() predicate.Trip {
	return predicate.Trip(sql.FieldIsNull(FieldDistanceKm))
}

// DistanceKmNotNil applies the NotNil predicate on the "distance_km" field.
func DistanceKmNotNil() predicate.Trip {
	return predicate.Trip(sql.FieldNotNull(FieldDistanceKm))
}

// NumericEQ applies the EQ predicate on the "numeric" field.
func NumericEQ(v string) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldNumeric, v))
}

// NumericNEQ applies the NEQ predicate on the "numeric" field.
func NumericNEQ(v string) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldNumeric, v))
}

// NumericIn applies the In predicate on the "numeric" field.
func NumericIn(vs ...string) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldNumeric, vs...))
}

// NumericNotIn applies the NotIn predicate on the "numeric" field.
func NumericNotIn(vs ...string) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldNumeric, vs...))
}

// NumericGT applies the GT predicate on the "numeric" field.
func NumericGT(v string) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldNumeric, v))
}

// NumericGTE applies the GTE predicate on the "numeric" field.
func NumericGTE(v string) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldNumeric, v))
}

// NumericLT applies the LT predicate on the "numeric" field.
func NumericLT(v string) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldNumeric, v))
}

// NumericLTE applies the LTE predicate on the "numeric" field.
func NumericLTE(v string) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldNumeric, v))
}

// NumericContains applies the Contains predicate on the "numeric" field.
func NumericContains(v string) predicate.Trip {
	return predicate.Trip(sql.FieldContains(FieldNumeric, v))
}

// NumericHasPrefix applies the HasPrefix predicate on the "numeric" field.
func NumericHasPrefix(v string) predicate.Trip {
	return predicate.Trip(sql.FieldHasPrefix(FieldNumeric, v))
}

// NumericHasSuffix applies the HasSuffix predicate on the "numeric" field.
func NumericHasSuffix(v string) predicate.Trip {
	return predicate.Trip(sql.FieldHasSuffix(FieldNumeric, v))
}

// NumericIsNil applies the IsNil predicate on the "numeric" field.
func NumericIsNil() predicate.Trip {
	return predicate.Trip(sql.FieldIsNull(FieldNumeric))
}

// NumericNotNil applies the NotNil predicate on the "numeric" field.
func NumericNotNil() predicate.Trip {
	return predicate.Trip(sql.FieldNotNull(FieldNumeric))
}

// NumericEqualFold applies the EqualFold predicate on the "numeric" field.
func NumericEqualFold(v string) predicate.Trip {
	return predicate.Trip(sql.FieldEqualFold(FieldNumeric, v))
}

// NumericContainsFold applies the ContainsFold predicate on the "numeric" field.
func NumericContainsFold(v string) predicate.Trip {
	return predicate.Trip(sql.FieldContainsFold(FieldNumeric, v))
}

// IsPaidEQ applies the EQ predicate on the "is_paid" field.
func IsPaidEQ(v bool) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldIsPaid, v))
}

// IsPaidNEQ applies the NEQ predicate on the "is_paid" field.
func IsPaidNEQ(v bool) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldIsPaid, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldCreatedAt, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Trip {
	return predicate.Trip(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Trip {
	return predicate.Trip(sql.FieldNotNull(FieldStartedAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.Trip {
	return predicate.Trip(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.Trip {
	return predicate.Trip(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.Trip {
	return predicate.Trip(sql.FieldNotNull(FieldCompletedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Trip {
	return predicate.Trip(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Trip {
	return predicate.Trip(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDriver applies the HasEdge predicate on the "driver" edge.
func HasDriver() predicate.Trip {
	return predicate.Trip(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DriverTable, DriverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDriverWith applies the HasEdge predicate on the "driver" edge with a given conditions (other predicates).
func HasDriverWith(preds ...predicate.User) predicate.Trip {
	return predicate.Trip(func(s *sql.Selector) {
		step := newDriverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayment applies the HasEdge predicate on the "payment" edge.
func HasPayment() predicate.Trip {
	return predicate.Trip(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentTable, PaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentWith applies the HasEdge predicate on the "payment" edge with a given conditions (other predicates).
func HasPaymentWith(preds ...predicate.Payment) predicate.Trip {
	return predicate.Trip(func(s *sql.Selector) {
		step := newPaymentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRatings applies the HasEdge predicate on the "ratings" edge.
func HasRatings() predicate.Trip {
	return predicate.Trip(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RatingsTable, RatingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRatingsWith applies the HasEdge predicate on the "ratings" edge with a given conditions (other predicates).
func HasRatingsWith(preds ...predicate.TripRating) predicate.Trip {
	return predicate.Trip(func(s *sql.Selector) {
		step := newRatingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Trip) predicate.Trip {
	return predicate.Trip(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Trip) predicate.Trip {
	return predicate.Trip(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Trip) predicate.Trip {
	return predicate.Trip(sql.NotPredicates(p))
}
