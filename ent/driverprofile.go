// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gojeksrepo/ent/driverprofile"
	"gojeksrepo/ent/user"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// DriverProfile is the model entity for the DriverProfile schema.
type DriverProfile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// LicenseNumber holds the value of the "license_number" field.
	LicenseNumber string `json:"license_number,omitempty"`
	// KtpNumber holds the value of the "ktp_number" field.
	KtpNumber string `json:"ktp_number,omitempty"`
	// Status holds the value of the "status" field.
	Status driverprofile.Status `json:"status,omitempty"`
	// VehicleInfo holds the value of the "vehicle_info" field.
	VehicleInfo string `json:"vehicle_info,omitempty"`
	// CurrentLat holds the value of the "current_lat" field.
	CurrentLat *float64 `json:"current_lat,omitempty"`
	// CurrentLong holds the value of the "current_long" field.
	CurrentLong *float64 `json:"current_long,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DriverProfileQuery when eager-loading is set.
	Edges        DriverProfileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DriverProfileEdges holds the relations/edges for other nodes in the graph.
type DriverProfileEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// TripsDriver holds the value of the trips_driver edge.
	TripsDriver []*Trip `json:"trips_driver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DriverProfileEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TripsDriverOrErr returns the TripsDriver value or an error if the edge
// was not loaded in eager-loading.
func (e DriverProfileEdges) TripsDriverOrErr() ([]*Trip, error) {
	if e.loadedTypes[1] {
		return e.TripsDriver, nil
	}
	return nil, &NotLoadedError{edge: "trips_driver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DriverProfile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case driverprofile.FieldIsActive:
			values[i] = new(sql.NullBool)
		case driverprofile.FieldCurrentLat, driverprofile.FieldCurrentLong:
			values[i] = new(sql.NullFloat64)
		case driverprofile.FieldLicenseNumber, driverprofile.FieldKtpNumber, driverprofile.FieldStatus, driverprofile.FieldVehicleInfo:
			values[i] = new(sql.NullString)
		case driverprofile.FieldID, driverprofile.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DriverProfile fields.
func (dp *DriverProfile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case driverprofile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dp.ID = *value
			}
		case driverprofile.FieldLicenseNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_number", values[i])
			} else if value.Valid {
				dp.LicenseNumber = value.String
			}
		case driverprofile.FieldKtpNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ktp_number", values[i])
			} else if value.Valid {
				dp.KtpNumber = value.String
			}
		case driverprofile.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dp.Status = driverprofile.Status(value.String)
			}
		case driverprofile.FieldVehicleInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vehicle_info", values[i])
			} else if value.Valid {
				dp.VehicleInfo = value.String
			}
		case driverprofile.FieldCurrentLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field current_lat", values[i])
			} else if value.Valid {
				dp.CurrentLat = new(float64)
				*dp.CurrentLat = value.Float64
			}
		case driverprofile.FieldCurrentLong:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field current_long", values[i])
			} else if value.Valid {
				dp.CurrentLong = new(float64)
				*dp.CurrentLong = value.Float64
			}
		case driverprofile.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				dp.IsActive = value.Bool
			}
		case driverprofile.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				dp.UserID = *value
			}
		default:
			dp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DriverProfile.
// This includes values selected through modifiers, order, etc.
func (dp *DriverProfile) Value(name string) (ent.Value, error) {
	return dp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the DriverProfile entity.
func (dp *DriverProfile) QueryUser() *UserQuery {
	return NewDriverProfileClient(dp.config).QueryUser(dp)
}

// QueryTripsDriver queries the "trips_driver" edge of the DriverProfile entity.
func (dp *DriverProfile) QueryTripsDriver() *TripQuery {
	return NewDriverProfileClient(dp.config).QueryTripsDriver(dp)
}

// Update returns a builder for updating this DriverProfile.
// Note that you need to call DriverProfile.Unwrap() before calling this method if this DriverProfile
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DriverProfile) Update() *DriverProfileUpdateOne {
	return NewDriverProfileClient(dp.config).UpdateOne(dp)
}

// Unwrap unwraps the DriverProfile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DriverProfile) Unwrap() *DriverProfile {
	_tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("ent: DriverProfile is not a transactional entity")
	}
	dp.config.driver = _tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DriverProfile) String() string {
	var builder strings.Builder
	builder.WriteString("DriverProfile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dp.ID))
	builder.WriteString("license_number=")
	builder.WriteString(dp.LicenseNumber)
	builder.WriteString(", ")
	builder.WriteString("ktp_number=")
	builder.WriteString(dp.KtpNumber)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", dp.Status))
	builder.WriteString(", ")
	builder.WriteString("vehicle_info=")
	builder.WriteString(dp.VehicleInfo)
	builder.WriteString(", ")
	if v := dp.CurrentLat; v != nil {
		builder.WriteString("current_lat=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dp.CurrentLong; v != nil {
		builder.WriteString("current_long=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", dp.IsActive))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", dp.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// DriverProfiles is a parsable slice of DriverProfile.
type DriverProfiles []*DriverProfile
