// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"gojeksrepo/ent/driverprofile"
	"gojeksrepo/ent/predicate"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/user"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DriverProfileQuery is the builder for querying DriverProfile entities.
type DriverProfileQuery struct {
	config
	ctx             *QueryContext
	order           []driverprofile.OrderOption
	inters          []Interceptor
	predicates      []predicate.DriverProfile
	withUser        *UserQuery
	withTripsDriver *TripQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the DriverProfileQuery builder.
func (dpq *DriverProfileQuery) Where(ps ...predicate.DriverProfile) *DriverProfileQuery {
	dpq.predicates = append(dpq.predicates, ps...)
	return dpq
}

// Limit the number of records to be returned by this query.
func (dpq *DriverProfileQuery) Limit(limit int) *DriverProfileQuery {
	dpq.ctx.Limit = &limit
	return dpq
}

// Offset to start from.
func (dpq *DriverProfileQuery) Offset(offset int) *DriverProfileQuery {
	dpq.ctx.Offset = &offset
	return dpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (dpq *DriverProfileQuery) Unique(unique bool) *DriverProfileQuery {
	dpq.ctx.Unique = &unique
	return dpq
}

// Order specifies how the records should be ordered.
func (dpq *DriverProfileQuery) Order(o ...driverprofile.OrderOption) *DriverProfileQuery {
	dpq.order = append(dpq.order, o...)
	return dpq
}

// QueryUser chains the current query on the "user" edge.
func (dpq *DriverProfileQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(driverprofile.Table, driverprofile.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, driverprofile.UserTable, driverprofile.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTripsDriver chains the current query on the "trips_driver" edge.
func (dpq *DriverProfileQuery) QueryTripsDriver() *TripQuery {
	query := (&TripClient{config: dpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(driverprofile.Table, driverprofile.FieldID, selector),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, driverprofile.TripsDriverTable, driverprofile.TripsDriverColumn),
		)
		fromU = sqlgraph.SetNeighbors(dpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DriverProfile entity from the query.
// Returns a *NotFoundError when no DriverProfile was found.
func (dpq *DriverProfileQuery) First(ctx context.Context) (*DriverProfile, error) {
	nodes, err := dpq.Limit(1).All(setContextOp(ctx, dpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{driverprofile.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dpq *DriverProfileQuery) FirstX(ctx context.Context) *DriverProfile {
	node, err := dpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DriverProfile ID from the query.
// Returns a *NotFoundError when no DriverProfile ID was found.
func (dpq *DriverProfileQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dpq.Limit(1).IDs(setContextOp(ctx, dpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{driverprofile.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dpq *DriverProfileQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := dpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single DriverProfile entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one DriverProfile entity is found.
// Returns a *NotFoundError when no DriverProfile entities are found.
func (dpq *DriverProfileQuery) Only(ctx context.Context) (*DriverProfile, error) {
	nodes, err := dpq.Limit(2).All(setContextOp(ctx, dpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{driverprofile.Label}
	default:
		return nil, &NotSingularError{driverprofile.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dpq *DriverProfileQuery) OnlyX(ctx context.Context) *DriverProfile {
	node, err := dpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only DriverProfile ID in the query.
// Returns a *NotSingularError when more than one DriverProfile ID is found.
// Returns a *NotFoundError when no entities are found.
func (dpq *DriverProfileQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = dpq.Limit(2).IDs(setContextOp(ctx, dpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{driverprofile.Label}
	default:
		err = &NotSingularError{driverprofile.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dpq *DriverProfileQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := dpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DriverProfiles.
func (dpq *DriverProfileQuery) All(ctx context.Context) ([]*DriverProfile, error) {
	ctx = setContextOp(ctx, dpq.ctx, ent.OpQueryAll)
	if err := dpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*DriverProfile, *DriverProfileQuery]()
	return withInterceptors[[]*DriverProfile](ctx, dpq, qr, dpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (dpq *DriverProfileQuery) AllX(ctx context.Context) []*DriverProfile {
	nodes, err := dpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DriverProfile IDs.
func (dpq *DriverProfileQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if dpq.ctx.Unique == nil && dpq.path != nil {
		dpq.Unique(true)
	}
	ctx = setContextOp(ctx, dpq.ctx, ent.OpQueryIDs)
	if err = dpq.Select(driverprofile.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dpq *DriverProfileQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := dpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dpq *DriverProfileQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, dpq.ctx, ent.OpQueryCount)
	if err := dpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, dpq, querierCount[*DriverProfileQuery](), dpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (dpq *DriverProfileQuery) CountX(ctx context.Context) int {
	count, err := dpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dpq *DriverProfileQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, dpq.ctx, ent.OpQueryExist)
	switch _, err := dpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (dpq *DriverProfileQuery) ExistX(ctx context.Context) bool {
	exist, err := dpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the DriverProfileQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dpq *DriverProfileQuery) Clone() *DriverProfileQuery {
	if dpq == nil {
		return nil
	}
	return &DriverProfileQuery{
		config:          dpq.config,
		ctx:             dpq.ctx.Clone(),
		order:           append([]driverprofile.OrderOption{}, dpq.order...),
		inters:          append([]Interceptor{}, dpq.inters...),
		predicates:      append([]predicate.DriverProfile{}, dpq.predicates...),
		withUser:        dpq.withUser.Clone(),
		withTripsDriver: dpq.withTripsDriver.Clone(),
		// clone intermediate query.
		sql:  dpq.sql.Clone(),
		path: dpq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DriverProfileQuery) WithUser(opts ...func(*UserQuery)) *DriverProfileQuery {
	query := (&UserClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withUser = query
	return dpq
}

// WithTripsDriver tells the query-builder to eager-load the nodes that are connected to
// the "trips_driver" edge. The optional arguments are used to configure the query builder of the edge.
func (dpq *DriverProfileQuery) WithTripsDriver(opts ...func(*TripQuery)) *DriverProfileQuery {
	query := (&TripClient{config: dpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	dpq.withTripsDriver = query
	return dpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LicenseNumber string `json:"license_number,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.DriverProfile.Query().
//		GroupBy(driverprofile.FieldLicenseNumber).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (dpq *DriverProfileQuery) GroupBy(field string, fields ...string) *DriverProfileGroupBy {
	dpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &DriverProfileGroupBy{build: dpq}
	grbuild.flds = &dpq.ctx.Fields
	grbuild.label = driverprofile.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LicenseNumber string `json:"license_number,omitempty"`
//	}
//
//	client.DriverProfile.Query().
//		Select(driverprofile.FieldLicenseNumber).
//		Scan(ctx, &v)
func (dpq *DriverProfileQuery) Select(fields ...string) *DriverProfileSelect {
	dpq.ctx.Fields = append(dpq.ctx.Fields, fields...)
	sbuild := &DriverProfileSelect{DriverProfileQuery: dpq}
	sbuild.label = driverprofile.Label
	sbuild.flds, sbuild.scan = &dpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a DriverProfileSelect configured with the given aggregations.
func (dpq *DriverProfileQuery) Aggregate(fns ...AggregateFunc) *DriverProfileSelect {
	return dpq.Select().Aggregate(fns...)
}

func (dpq *DriverProfileQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range dpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, dpq); err != nil {
				return err
			}
		}
	}
	for _, f := range dpq.ctx.Fields {
		if !driverprofile.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if dpq.path != nil {
		prev, err := dpq.path(ctx)
		if err != nil {
			return err
		}
		dpq.sql = prev
	}
	return nil
}

func (dpq *DriverProfileQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*DriverProfile, error) {
	var (
		nodes       = []*DriverProfile{}
		_spec       = dpq.querySpec()
		loadedTypes = [2]bool{
			dpq.withUser != nil,
			dpq.withTripsDriver != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*DriverProfile).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &DriverProfile{config: dpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, dpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := dpq.withUser; query != nil {
		if err := dpq.loadUser(ctx, query, nodes, nil,
			func(n *DriverProfile, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := dpq.withTripsDriver; query != nil {
		if err := dpq.loadTripsDriver(ctx, query, nodes,
			func(n *DriverProfile) { n.Edges.TripsDriver = []*Trip{} },
			func(n *DriverProfile, e *Trip) { n.Edges.TripsDriver = append(n.Edges.TripsDriver, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (dpq *DriverProfileQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*DriverProfile, init func(*DriverProfile), assign func(*DriverProfile, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*DriverProfile)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (dpq *DriverProfileQuery) loadTripsDriver(ctx context.Context, query *TripQuery, nodes []*DriverProfile, init func(*DriverProfile), assign func(*DriverProfile, *Trip)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*DriverProfile)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(trip.FieldDriverID)
	}
	query.Where(predicate.Trip(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(driverprofile.TripsDriverColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.DriverID
		if fk == nil {
			return fmt.Errorf(`foreign-key "driver_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "driver_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (dpq *DriverProfileQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dpq.querySpec()
	_spec.Node.Columns = dpq.ctx.Fields
	if len(dpq.ctx.Fields) > 0 {
		_spec.Unique = dpq.ctx.Unique != nil && *dpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, dpq.driver, _spec)
}

func (dpq *DriverProfileQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(driverprofile.Table, driverprofile.Columns, sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID))
	_spec.From = dpq.sql
	if unique := dpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if dpq.path != nil {
		_spec.Unique = true
	}
	if fields := dpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, driverprofile.FieldID)
		for i := range fields {
			if fields[i] != driverprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if dpq.withUser != nil {
			_spec.Node.AddColumnOnce(driverprofile.FieldUserID)
		}
	}
	if ps := dpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (dpq *DriverProfileQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(dpq.driver.Dialect())
	t1 := builder.Table(driverprofile.Table)
	columns := dpq.ctx.Fields
	if len(columns) == 0 {
		columns = driverprofile.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if dpq.sql != nil {
		selector = dpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if dpq.ctx.Unique != nil && *dpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range dpq.predicates {
		p(selector)
	}
	for _, p := range dpq.order {
		p(selector)
	}
	if offset := dpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DriverProfileGroupBy is the group-by builder for DriverProfile entities.
type DriverProfileGroupBy struct {
	selector
	build *DriverProfileQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dpgb *DriverProfileGroupBy) Aggregate(fns ...AggregateFunc) *DriverProfileGroupBy {
	dpgb.fns = append(dpgb.fns, fns...)
	return dpgb
}

// Scan applies the selector query and scans the result into the given value.
func (dpgb *DriverProfileGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dpgb.build.ctx, ent.OpQueryGroupBy)
	if err := dpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DriverProfileQuery, *DriverProfileGroupBy](ctx, dpgb.build, dpgb, dpgb.build.inters, v)
}

func (dpgb *DriverProfileGroupBy) sqlScan(ctx context.Context, root *DriverProfileQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(dpgb.fns))
	for _, fn := range dpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*dpgb.flds)+len(dpgb.fns))
		for _, f := range *dpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*dpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// DriverProfileSelect is the builder for selecting fields of DriverProfile entities.
type DriverProfileSelect struct {
	*DriverProfileQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (dps *DriverProfileSelect) Aggregate(fns ...AggregateFunc) *DriverProfileSelect {
	dps.fns = append(dps.fns, fns...)
	return dps
}

// Scan applies the selector query and scans the result into the given value.
func (dps *DriverProfileSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, dps.ctx, ent.OpQuerySelect)
	if err := dps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*DriverProfileQuery, *DriverProfileSelect](ctx, dps.DriverProfileQuery, dps, dps.inters, v)
}

func (dps *DriverProfileSelect) sqlScan(ctx context.Context, root *DriverProfileQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(dps.fns))
	for _, fn := range dps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*dps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
