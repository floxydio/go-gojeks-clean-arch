// Code generated by ent, DO NOT EDIT.

package triprating

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the triprating type in the database.
	Label = "trip_rating"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTripID holds the string denoting the trip_id field in the database.
	FieldTripID = "trip_id"
	// FieldFromUserID holds the string denoting the from_user_id field in the database.
	FieldFromUserID = "from_user_id"
	// FieldToUserID holds the string denoting the to_user_id field in the database.
	FieldToUserID = "to_user_id"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTrip holds the string denoting the trip edge name in mutations.
	EdgeTrip = "trip"
	// EdgeFromUser holds the string denoting the from_user edge name in mutations.
	EdgeFromUser = "from_user"
	// EdgeToUser holds the string denoting the to_user edge name in mutations.
	EdgeToUser = "to_user"
	// Table holds the table name of the triprating in the database.
	Table = "trip_ratings"
	// TripTable is the table that holds the trip relation/edge.
	TripTable = "trip_ratings"
	// TripInverseTable is the table name for the Trip entity.
	// It exists in this package in order to avoid circular dependency with the "trip" package.
	TripInverseTable = "trips"
	// TripColumn is the table column denoting the trip relation/edge.
	TripColumn = "trip_id"
	// FromUserTable is the table that holds the from_user relation/edge.
	FromUserTable = "trip_ratings"
	// FromUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	FromUserInverseTable = "users"
	// FromUserColumn is the table column denoting the from_user relation/edge.
	FromUserColumn = "from_user_id"
	// ToUserTable is the table that holds the to_user relation/edge.
	ToUserTable = "trip_ratings"
	// ToUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ToUserInverseTable = "users"
	// ToUserColumn is the table column denoting the to_user relation/edge.
	ToUserColumn = "to_user_id"
)

// Columns holds all SQL columns for triprating fields.
var Columns = []string{
	FieldID,
	FieldTripID,
	FieldFromUserID,
	FieldToUserID,
	FieldRating,
	FieldComment,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultComment holds the default value on creation for the "comment" field.
	DefaultComment string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TripRating queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTripID orders the results by the trip_id field.
func ByTripID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTripID, opts...).ToFunc()
}

// ByFromUserID orders the results by the from_user_id field.
func ByFromUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromUserID, opts...).ToFunc()
}

// ByToUserID orders the results by the to_user_id field.
func ByToUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToUserID, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTripField orders the results by trip field.
func ByTripField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTripStep(), sql.OrderByField(field, opts...))
	}
}

// ByFromUserField orders the results by from_user field.
func ByFromUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByToUserField orders the results by to_user field.
func ByToUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToUserStep(), sql.OrderByField(field, opts...))
	}
}
func newTripStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TripInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TripTable, TripColumn),
	)
}
func newFromUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FromUserTable, FromUserColumn),
	)
}
func newToUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ToUserTable, ToUserColumn),
	)
}
