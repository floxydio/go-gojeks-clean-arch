// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/triprating"
	"gojeksrepo/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// TripRating is the model entity for the TripRating schema.
type TripRating struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TripID holds the value of the "trip_id" field.
	TripID uuid.UUID `json:"trip_id,omitempty"`
	// FromUserID holds the value of the "from_user_id" field.
	FromUserID uuid.UUID `json:"from_user_id,omitempty"`
	// ToUserID holds the value of the "to_user_id" field.
	ToUserID uuid.UUID `json:"to_user_id,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TripRatingQuery when eager-loading is set.
	Edges        TripRatingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TripRatingEdges holds the relations/edges for other nodes in the graph.
type TripRatingEdges struct {
	// Trip holds the value of the trip edge.
	Trip *Trip `json:"trip,omitempty"`
	// FromUser holds the value of the from_user edge.
	FromUser *User `json:"from_user,omitempty"`
	// ToUser holds the value of the to_user edge.
	ToUser *User `json:"to_user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TripOrErr returns the Trip value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TripRatingEdges) TripOrErr() (*Trip, error) {
	if e.Trip != nil {
		return e.Trip, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: trip.Label}
	}
	return nil, &NotLoadedError{edge: "trip"}
}

// FromUserOrErr returns the FromUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TripRatingEdges) FromUserOrErr() (*User, error) {
	if e.FromUser != nil {
		return e.FromUser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "from_user"}
}

// ToUserOrErr returns the ToUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TripRatingEdges) ToUserOrErr() (*User, error) {
	if e.ToUser != nil {
		return e.ToUser, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "to_user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TripRating) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case triprating.FieldRating:
			values[i] = new(sql.NullInt64)
		case triprating.FieldComment:
			values[i] = new(sql.NullString)
		case triprating.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case triprating.FieldID, triprating.FieldTripID, triprating.FieldFromUserID, triprating.FieldToUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TripRating fields.
func (tr *TripRating) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case triprating.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tr.ID = *value
			}
		case triprating.FieldTripID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field trip_id", values[i])
			} else if value != nil {
				tr.TripID = *value
			}
		case triprating.FieldFromUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field from_user_id", values[i])
			} else if value != nil {
				tr.FromUserID = *value
			}
		case triprating.FieldToUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field to_user_id", values[i])
			} else if value != nil {
				tr.ToUserID = *value
			}
		case triprating.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				tr.Rating = int(value.Int64)
			}
		case triprating.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				tr.Comment = value.String
			}
		case triprating.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = value.Time
			}
		default:
			tr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TripRating.
// This includes values selected through modifiers, order, etc.
func (tr *TripRating) Value(name string) (ent.Value, error) {
	return tr.selectValues.Get(name)
}

// QueryTrip queries the "trip" edge of the TripRating entity.
func (tr *TripRating) QueryTrip() *TripQuery {
	return NewTripRatingClient(tr.config).QueryTrip(tr)
}

// QueryFromUser queries the "from_user" edge of the TripRating entity.
func (tr *TripRating) QueryFromUser() *UserQuery {
	return NewTripRatingClient(tr.config).QueryFromUser(tr)
}

// QueryToUser queries the "to_user" edge of the TripRating entity.
func (tr *TripRating) QueryToUser() *UserQuery {
	return NewTripRatingClient(tr.config).QueryToUser(tr)
}

// Update returns a builder for updating this TripRating.
// Note that you need to call TripRating.Unwrap() before calling this method if this TripRating
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TripRating) Update() *TripRatingUpdateOne {
	return NewTripRatingClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TripRating entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TripRating) Unwrap() *TripRating {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TripRating is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TripRating) String() string {
	var builder strings.Builder
	builder.WriteString("TripRating(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("trip_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.TripID))
	builder.WriteString(", ")
	builder.WriteString("from_user_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.FromUserID))
	builder.WriteString(", ")
	builder.WriteString("to_user_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.ToUserID))
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", tr.Rating))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(tr.Comment)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TripRatings is a parsable slice of TripRating.
type TripRatings []*TripRating
