// Code generated by ent, DO NOT EDIT.

package driverprofile

import (
	"gojeksrepo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLTE(FieldID, id))
}

// LicenseNumber applies equality check predicate on the "license_number" field. It's identical to LicenseNumberEQ.
func LicenseNumber(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldLicenseNumber, v))
}

// KtpNumber applies equality check predicate on the "ktp_number" field. It's identical to KtpNumberEQ.
func KtpNumber(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldKtpNumber, v))
}

// VehicleInfo applies equality check predicate on the "vehicle_info" field. It's identical to VehicleInfoEQ.
func VehicleInfo(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldVehicleInfo, v))
}

// CurrentLat applies equality check predicate on the "current_lat" field. It's identical to CurrentLatEQ.
func CurrentLat(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldCurrentLat, v))
}

// CurrentLong applies equality check predicate on the "current_long" field. It's identical to CurrentLongEQ.
func CurrentLong(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldCurrentLong, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v bool) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldIsActive, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldUserID, v))
}

// LicenseNumberEQ applies the EQ predicate on the "license_number" field.
func LicenseNumberEQ(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldLicenseNumber, v))
}

// LicenseNumberNEQ applies the NEQ predicate on the "license_number" field.
func LicenseNumberNEQ(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldLicenseNumber, v))
}

// LicenseNumberIn applies the In predicate on the "license_number" field.
func LicenseNumberIn(vs ...string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIn(FieldLicenseNumber, vs...))
}

// LicenseNumberNotIn applies the NotIn predicate on the "license_number" field.
func LicenseNumberNotIn(vs ...string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotIn(FieldLicenseNumber, vs...))
}

// LicenseNumberGT applies the GT predicate on the "license_number" field.
func LicenseNumberGT(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGT(FieldLicenseNumber, v))
}

// LicenseNumberGTE applies the GTE predicate on the "license_number" field.
func LicenseNumberGTE(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGTE(FieldLicenseNumber, v))
}

// LicenseNumberLT applies the LT predicate on the "license_number" field.
func LicenseNumberLT(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLT(FieldLicenseNumber, v))
}

// LicenseNumberLTE applies the LTE predicate on the "license_number" field.
func LicenseNumberLTE(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLTE(FieldLicenseNumber, v))
}

// LicenseNumberContains applies the Contains predicate on the "license_number" field.
func LicenseNumberContains(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldContains(FieldLicenseNumber, v))
}

// LicenseNumberHasPrefix applies the HasPrefix predicate on the "license_number" field.
func LicenseNumberHasPrefix(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldHasPrefix(FieldLicenseNumber, v))
}

// LicenseNumberHasSuffix applies the HasSuffix predicate on the "license_number" field.
func LicenseNumberHasSuffix(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldHasSuffix(FieldLicenseNumber, v))
}

// LicenseNumberEqualFold applies the EqualFold predicate on the "license_number" field.
func LicenseNumberEqualFold(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEqualFold(FieldLicenseNumber, v))
}

// LicenseNumberContainsFold applies the ContainsFold predicate on the "license_number" field.
func LicenseNumberContainsFold(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldContainsFold(FieldLicenseNumber, v))
}

// KtpNumberEQ applies the EQ predicate on the "ktp_number" field.
func KtpNumberEQ(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldKtpNumber, v))
}

// KtpNumberNEQ applies the NEQ predicate on the "ktp_number" field.
func KtpNumberNEQ(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldKtpNumber, v))
}

// KtpNumberIn applies the In predicate on the "ktp_number" field.
func KtpNumberIn(vs ...string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIn(FieldKtpNumber, vs...))
}

// KtpNumberNotIn applies the NotIn predicate on the "ktp_number" field.
func KtpNumberNotIn(vs ...string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotIn(FieldKtpNumber, vs...))
}

// KtpNumberGT applies the GT predicate on the "ktp_number" field.
func KtpNumberGT(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGT(FieldKtpNumber, v))
}

// KtpNumberGTE applies the GTE predicate on the "ktp_number" field.
func KtpNumberGTE(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGTE(FieldKtpNumber, v))
}

// KtpNumberLT applies the LT predicate on the "ktp_number" field.
func KtpNumberLT(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLT(FieldKtpNumber, v))
}

// KtpNumberLTE applies the LTE predicate on the "ktp_number" field.
func KtpNumberLTE(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLTE(FieldKtpNumber, v))
}

// KtpNumberContains applies the Contains predicate on the "ktp_number" field.
func KtpNumberContains(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldContains(FieldKtpNumber, v))
}

// KtpNumberHasPrefix applies the HasPrefix predicate on the "ktp_number" field.
func KtpNumberHasPrefix(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldHasPrefix(FieldKtpNumber, v))
}

// KtpNumberHasSuffix applies the HasSuffix predicate on the "ktp_number" field.
func KtpNumberHasSuffix(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldHasSuffix(FieldKtpNumber, v))
}

// KtpNumberEqualFold applies the EqualFold predicate on the "ktp_number" field.
func KtpNumberEqualFold(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEqualFold(FieldKtpNumber, v))
}

// KtpNumberContainsFold applies the ContainsFold predicate on the "ktp_number" field.
func KtpNumberContainsFold(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldContainsFold(FieldKtpNumber, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotIn(FieldStatus, vs...))
}

// VehicleInfoEQ applies the EQ predicate on the "vehicle_info" field.
func VehicleInfoEQ(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldVehicleInfo, v))
}

// VehicleInfoNEQ applies the NEQ predicate on the "vehicle_info" field.
func VehicleInfoNEQ(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldVehicleInfo, v))
}

// VehicleInfoIn applies the In predicate on the "vehicle_info" field.
func VehicleInfoIn(vs ...string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIn(FieldVehicleInfo, vs...))
}

// VehicleInfoNotIn applies the NotIn predicate on the "vehicle_info" field.
func VehicleInfoNotIn(vs ...string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotIn(FieldVehicleInfo, vs...))
}

// VehicleInfoGT applies the GT predicate on the "vehicle_info" field.
func VehicleInfoGT(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGT(FieldVehicleInfo, v))
}

// VehicleInfoGTE applies the GTE predicate on the "vehicle_info" field.
func VehicleInfoGTE(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGTE(FieldVehicleInfo, v))
}

// VehicleInfoLT applies the LT predicate on the "vehicle_info" field.
func VehicleInfoLT(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLT(FieldVehicleInfo, v))
}

// VehicleInfoLTE applies the LTE predicate on the "vehicle_info" field.
func VehicleInfoLTE(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLTE(FieldVehicleInfo, v))
}

// VehicleInfoContains applies the Contains predicate on the "vehicle_info" field.
func VehicleInfoContains(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldContains(FieldVehicleInfo, v))
}

// VehicleInfoHasPrefix applies the HasPrefix predicate on the "vehicle_info" field.
func VehicleInfoHasPrefix(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldHasPrefix(FieldVehicleInfo, v))
}

// VehicleInfoHasSuffix applies the HasSuffix predicate on the "vehicle_info" field.
func VehicleInfoHasSuffix(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldHasSuffix(FieldVehicleInfo, v))
}

// VehicleInfoEqualFold applies the EqualFold predicate on the "vehicle_info" field.
func VehicleInfoEqualFold(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEqualFold(FieldVehicleInfo, v))
}

// VehicleInfoContainsFold applies the ContainsFold predicate on the "vehicle_info" field.
func VehicleInfoContainsFold(v string) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldContainsFold(FieldVehicleInfo, v))
}

// CurrentLatEQ applies the EQ predicate on the "current_lat" field.
func CurrentLatEQ(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldCurrentLat, v))
}

// CurrentLatNEQ applies the NEQ predicate on the "current_lat" field.
func CurrentLatNEQ(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldCurrentLat, v))
}

// CurrentLatIn applies the In predicate on the "current_lat" field.
func CurrentLatIn(vs ...float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIn(FieldCurrentLat, vs...))
}

// CurrentLatNotIn applies the NotIn predicate on the "current_lat" field.
func CurrentLatNotIn(vs ...float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotIn(FieldCurrentLat, vs...))
}

// CurrentLatGT applies the GT predicate on the "current_lat" field.
func CurrentLatGT(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGT(FieldCurrentLat, v))
}

// CurrentLatGTE applies the GTE predicate on the "current_lat" field.
func CurrentLatGTE(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGTE(FieldCurrentLat, v))
}

// CurrentLatLT applies the LT predicate on the "current_lat" field.
func CurrentLatLT(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLT(FieldCurrentLat, v))
}

// CurrentLatLTE applies the LTE predicate on the "current_lat" field.
func CurrentLatLTE(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLTE(FieldCurrentLat, v))
}

// CurrentLatIsNil applies the IsNil predicate on the "current_lat" field.
func CurrentLatIsNil() predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIsNull(FieldCurrentLat))
}

// CurrentLatNotNil applies the NotNil predicate on the "current_lat" field.
func CurrentLatNotNil() predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotNull(FieldCurrentLat))
}

// CurrentLongEQ applies the EQ predicate on the "current_long" field.
func CurrentLongEQ(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldCurrentLong, v))
}

// CurrentLongNEQ applies the NEQ predicate on the "current_long" field.
func CurrentLongNEQ(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldCurrentLong, v))
}

// CurrentLongIn applies the In predicate on the "current_long" field.
func CurrentLongIn(vs ...float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIn(FieldCurrentLong, vs...))
}

// CurrentLongNotIn applies the NotIn predicate on the "current_long" field.
func CurrentLongNotIn(vs ...float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotIn(FieldCurrentLong, vs...))
}

// CurrentLongGT applies the GT predicate on the "current_long" field.
func CurrentLongGT(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGT(FieldCurrentLong, v))
}

// CurrentLongGTE applies the GTE predicate on the "current_long" field.
func CurrentLongGTE(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldGTE(FieldCurrentLong, v))
}

// CurrentLongLT applies the LT predicate on the "current_long" field.
func CurrentLongLT(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLT(FieldCurrentLong, v))
}

// CurrentLongLTE applies the LTE predicate on the "current_long" field.
func CurrentLongLTE(v float64) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldLTE(FieldCurrentLong, v))
}

// CurrentLongIsNil applies the IsNil predicate on the "current_long" field.
func CurrentLongIsNil() predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIsNull(FieldCurrentLong))
}

// CurrentLongNotNil applies the NotNil predicate on the "current_long" field.
func CurrentLongNotNil() predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotNull(FieldCurrentLong))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v bool) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v bool) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldIsActive, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.DriverProfile {
	return predicate.DriverProfile(sql.FieldNotIn(FieldUserID, vs...))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.DriverProfile {
	return predicate.DriverProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.DriverProfile {
	return predicate.DriverProfile(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTripsDriver applies the HasEdge predicate on the "trips_driver" edge.
func HasTripsDriver() predicate.DriverProfile {
	return predicate.DriverProfile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TripsDriverTable, TripsDriverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTripsDriverWith applies the HasEdge predicate on the "trips_driver" edge with a given conditions (other predicates).
func HasTripsDriverWith(preds ...predicate.Trip) predicate.DriverProfile {
	return predicate.DriverProfile(func(s *sql.Selector) {
		step := newTripsDriverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DriverProfile) predicate.DriverProfile {
	return predicate.DriverProfile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DriverProfile) predicate.DriverProfile {
	return predicate.DriverProfile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DriverProfile) predicate.DriverProfile {
	return predicate.DriverProfile(sql.NotPredicates(p))
}
