// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gojeksrepo/ent/driverprofile"
	"gojeksrepo/ent/payment"
	"gojeksrepo/ent/predicate"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/triprating"
	"gojeksrepo/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TripUpdate is the builder for updating Trip entities.
type TripUpdate struct {
	config
	hooks    []Hook
	mutation *TripMutation
}

// Where appends a list predicates to the TripUpdate builder.
func (tu *TripUpdate) Where(ps ...predicate.Trip) *TripUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TripUpdate) SetUserID(u uuid.UUID) *TripUpdate {
	tu.mutation.SetUserID(u)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TripUpdate) SetNillableUserID(u *uuid.UUID) *TripUpdate {
	if u != nil {
		tu.SetUserID(*u)
	}
	return tu
}

// SetDriverID sets the "driver_id" field.
func (tu *TripUpdate) SetDriverID(u uuid.UUID) *TripUpdate {
	tu.mutation.SetDriverID(u)
	return tu
}

// SetNillableDriverID sets the "driver_id" field if the given value is not nil.
func (tu *TripUpdate) SetNillableDriverID(u *uuid.UUID) *TripUpdate {
	if u != nil {
		tu.SetDriverID(*u)
	}
	return tu
}

// ClearDriverID clears the value of the "driver_id" field.
func (tu *TripUpdate) ClearDriverID() *TripUpdate {
	tu.mutation.ClearDriverID()
	return tu
}

// SetPickupLat sets the "pickup_lat" field.
func (tu *TripUpdate) SetPickupLat(f float64) *TripUpdate {
	tu.mutation.ResetPickupLat()
	tu.mutation.SetPickupLat(f)
	return tu
}

// SetNillablePickupLat sets the "pickup_lat" field if the given value is not nil.
func (tu *TripUpdate) SetNillablePickupLat(f *float64) *TripUpdate {
	if f != nil {
		tu.SetPickupLat(*f)
	}
	return tu
}

// AddPickupLat adds f to the "pickup_lat" field.
func (tu *TripUpdate) AddPickupLat(f float64) *TripUpdate {
	tu.mutation.AddPickupLat(f)
	return tu
}

// SetPickupLong sets the "pickup_long" field.
func (tu *TripUpdate) SetPickupLong(f float64) *TripUpdate {
	tu.mutation.ResetPickupLong()
	tu.mutation.SetPickupLong(f)
	return tu
}

// SetNillablePickupLong sets the "pickup_long" field if the given value is not nil.
func (tu *TripUpdate) SetNillablePickupLong(f *float64) *TripUpdate {
	if f != nil {
		tu.SetPickupLong(*f)
	}
	return tu
}

// AddPickupLong adds f to the "pickup_long" field.
func (tu *TripUpdate) AddPickupLong(f float64) *TripUpdate {
	tu.mutation.AddPickupLong(f)
	return tu
}

// SetDropLat sets the "drop_lat" field.
func (tu *TripUpdate) SetDropLat(f float64) *TripUpdate {
	tu.mutation.ResetDropLat()
	tu.mutation.SetDropLat(f)
	return tu
}

// SetNillableDropLat sets the "drop_lat" field if the given value is not nil.
func (tu *TripUpdate) SetNillableDropLat(f *float64) *TripUpdate {
	if f != nil {
		tu.SetDropLat(*f)
	}
	return tu
}

// AddDropLat adds f to the "drop_lat" field.
func (tu *TripUpdate) AddDropLat(f float64) *TripUpdate {
	tu.mutation.AddDropLat(f)
	return tu
}

// SetDropLong sets the "drop_long" field.
func (tu *TripUpdate) SetDropLong(f float64) *TripUpdate {
	tu.mutation.ResetDropLong()
	tu.mutation.SetDropLong(f)
	return tu
}

// SetNillableDropLong sets the "drop_long" field if the given value is not nil.
func (tu *TripUpdate) SetNillableDropLong(f *float64) *TripUpdate {
	if f != nil {
		tu.SetDropLong(*f)
	}
	return tu
}

// AddDropLong adds f to the "drop_long" field.
func (tu *TripUpdate) AddDropLong(f float64) *TripUpdate {
	tu.mutation.AddDropLong(f)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TripUpdate) SetStatus(t trip.Status) *TripUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TripUpdate) SetNillableStatus(t *trip.Status) *TripUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetDistanceKm sets the "distance_km" field.
func (tu *TripUpdate) SetDistanceKm(f float64) *TripUpdate {
	tu.mutation.ResetDistanceKm()
	tu.mutation.SetDistanceKm(f)
	return tu
}

// SetNillableDistanceKm sets the "distance_km" field if the given value is not nil.
func (tu *TripUpdate) SetNillableDistanceKm(f *float64) *TripUpdate {
	if f != nil {
		tu.SetDistanceKm(*f)
	}
	return tu
}

// AddDistanceKm adds f to the "distance_km" field.
func (tu *TripUpdate) AddDistanceKm(f float64) *TripUpdate {
	tu.mutation.AddDistanceKm(f)
	return tu
}

// ClearDistanceKm clears the value of the "distance_km" field.
func (tu *TripUpdate) ClearDistanceKm() *TripUpdate {
	tu.mutation.ClearDistanceKm()
	return tu
}

// SetNumeric sets the "numeric" field.
func (tu *TripUpdate) SetNumeric(s string) *TripUpdate {
	tu.mutation.SetNumeric(s)
	return tu
}

// SetNillableNumeric sets the "numeric" field if the given value is not nil.
func (tu *TripUpdate) SetNillableNumeric(s *string) *TripUpdate {
	if s != nil {
		tu.SetNumeric(*s)
	}
	return tu
}

// ClearNumeric clears the value of the "numeric" field.
func (tu *TripUpdate) ClearNumeric() *TripUpdate {
	tu.mutation.ClearNumeric()
	return tu
}

// SetIsPaid sets the "is_paid" field.
func (tu *TripUpdate) SetIsPaid(b bool) *TripUpdate {
	tu.mutation.SetIsPaid(b)
	return tu
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (tu *TripUpdate) SetNillableIsPaid(b *bool) *TripUpdate {
	if b != nil {
		tu.SetIsPaid(*b)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TripUpdate) SetCreatedAt(t time.Time) *TripUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TripUpdate) SetNillableCreatedAt(t *time.Time) *TripUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetStartedAt sets the "started_at" field.
func (tu *TripUpdate) SetStartedAt(t time.Time) *TripUpdate {
	tu.mutation.SetStartedAt(t)
	return tu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tu *TripUpdate) SetNillableStartedAt(t *time.Time) *TripUpdate {
	if t != nil {
		tu.SetStartedAt(*t)
	}
	return tu
}

// ClearStartedAt clears the value of the "started_at" field.
func (tu *TripUpdate) ClearStartedAt() *TripUpdate {
	tu.mutation.ClearStartedAt()
	return tu
}

// SetCompletedAt sets the "completed_at" field.
func (tu *TripUpdate) SetCompletedAt(t time.Time) *TripUpdate {
	tu.mutation.SetCompletedAt(t)
	return tu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tu *TripUpdate) SetNillableCompletedAt(t *time.Time) *TripUpdate {
	if t != nil {
		tu.SetCompletedAt(*t)
	}
	return tu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (tu *TripUpdate) ClearCompletedAt() *TripUpdate {
	tu.mutation.ClearCompletedAt()
	return tu
}

// SetUser sets the "user" edge to the User entity.
func (tu *TripUpdate) SetUser(u *User) *TripUpdate {
	return tu.SetUserID(u.ID)
}

// SetDriver sets the "driver" edge to the DriverProfile entity.
func (tu *TripUpdate) SetDriver(d *DriverProfile) *TripUpdate {
	return tu.SetDriverID(d.ID)
}

// AddPaymentIDs adds the "payment" edge to the Payment entity by IDs.
func (tu *TripUpdate) AddPaymentIDs(ids ...uuid.UUID) *TripUpdate {
	tu.mutation.AddPaymentIDs(ids...)
	return tu
}

// AddPayment adds the "payment" edges to the Payment entity.
func (tu *TripUpdate) AddPayment(p ...*Payment) *TripUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPaymentIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the TripRating entity by IDs.
func (tu *TripUpdate) AddRatingIDs(ids ...uuid.UUID) *TripUpdate {
	tu.mutation.AddRatingIDs(ids...)
	return tu
}

// AddRatings adds the "ratings" edges to the TripRating entity.
func (tu *TripUpdate) AddRatings(t ...*TripRating) *TripUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddRatingIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tu *TripUpdate) Mutation() *TripMutation {
	return tu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tu *TripUpdate) ClearUser() *TripUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearDriver clears the "driver" edge to the DriverProfile entity.
func (tu *TripUpdate) ClearDriver() *TripUpdate {
	tu.mutation.ClearDriver()
	return tu
}

// ClearPayment clears all "payment" edges to the Payment entity.
func (tu *TripUpdate) ClearPayment() *TripUpdate {
	tu.mutation.ClearPayment()
	return tu
}

// RemovePaymentIDs removes the "payment" edge to Payment entities by IDs.
func (tu *TripUpdate) RemovePaymentIDs(ids ...uuid.UUID) *TripUpdate {
	tu.mutation.RemovePaymentIDs(ids...)
	return tu
}

// RemovePayment removes "payment" edges to Payment entities.
func (tu *TripUpdate) RemovePayment(p ...*Payment) *TripUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePaymentIDs(ids...)
}

// ClearRatings clears all "ratings" edges to the TripRating entity.
func (tu *TripUpdate) ClearRatings() *TripUpdate {
	tu.mutation.ClearRatings()
	return tu
}

// RemoveRatingIDs removes the "ratings" edge to TripRating entities by IDs.
func (tu *TripUpdate) RemoveRatingIDs(ids ...uuid.UUID) *TripUpdate {
	tu.mutation.RemoveRatingIDs(ids...)
	return tu
}

// RemoveRatings removes "ratings" edges to TripRating entities.
func (tu *TripUpdate) RemoveRatings(t ...*TripRating) *TripUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveRatingIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TripUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TripUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TripUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TripUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TripUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	if tu.mutation.UserCleared() && len(tu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Trip.user"`)
	}
	return nil
}

func (tu *TripUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trip.Table, trip.Columns, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.PickupLat(); ok {
		_spec.SetField(trip.FieldPickupLat, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedPickupLat(); ok {
		_spec.AddField(trip.FieldPickupLat, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.PickupLong(); ok {
		_spec.SetField(trip.FieldPickupLong, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedPickupLong(); ok {
		_spec.AddField(trip.FieldPickupLong, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.DropLat(); ok {
		_spec.SetField(trip.FieldDropLat, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedDropLat(); ok {
		_spec.AddField(trip.FieldDropLat, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.DropLong(); ok {
		_spec.SetField(trip.FieldDropLong, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedDropLong(); ok {
		_spec.AddField(trip.FieldDropLong, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.DistanceKm(); ok {
		_spec.SetField(trip.FieldDistanceKm, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedDistanceKm(); ok {
		_spec.AddField(trip.FieldDistanceKm, field.TypeFloat64, value)
	}
	if tu.mutation.DistanceKmCleared() {
		_spec.ClearField(trip.FieldDistanceKm, field.TypeFloat64)
	}
	if value, ok := tu.mutation.Numeric(); ok {
		_spec.SetField(trip.FieldNumeric, field.TypeString, value)
	}
	if tu.mutation.NumericCleared() {
		_spec.ClearField(trip.FieldNumeric, field.TypeString)
	}
	if value, ok := tu.mutation.IsPaid(); ok {
		_spec.SetField(trip.FieldIsPaid, field.TypeBool, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(trip.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.StartedAt(); ok {
		_spec.SetField(trip.FieldStartedAt, field.TypeTime, value)
	}
	if tu.mutation.StartedAtCleared() {
		_spec.ClearField(trip.FieldStartedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.CompletedAt(); ok {
		_spec.SetField(trip.FieldCompletedAt, field.TypeTime, value)
	}
	if tu.mutation.CompletedAtCleared() {
		_spec.ClearField(trip.FieldCompletedAt, field.TypeTime)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.PaymentTable,
			Columns: []string{trip.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPaymentIDs(); len(nodes) > 0 && !tu.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.PaymentTable,
			Columns: []string{trip.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.PaymentTable,
			Columns: []string{trip.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.RatingsTable,
			Columns: []string{trip.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !tu.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.RatingsTable,
			Columns: []string{trip.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.RatingsTable,
			Columns: []string{trip.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TripUpdateOne is the builder for updating a single Trip entity.
type TripUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TripMutation
}

// SetUserID sets the "user_id" field.
func (tuo *TripUpdateOne) SetUserID(u uuid.UUID) *TripUpdateOne {
	tuo.mutation.SetUserID(u)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableUserID(u *uuid.UUID) *TripUpdateOne {
	if u != nil {
		tuo.SetUserID(*u)
	}
	return tuo
}

// SetDriverID sets the "driver_id" field.
func (tuo *TripUpdateOne) SetDriverID(u uuid.UUID) *TripUpdateOne {
	tuo.mutation.SetDriverID(u)
	return tuo
}

// SetNillableDriverID sets the "driver_id" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableDriverID(u *uuid.UUID) *TripUpdateOne {
	if u != nil {
		tuo.SetDriverID(*u)
	}
	return tuo
}

// ClearDriverID clears the value of the "driver_id" field.
func (tuo *TripUpdateOne) ClearDriverID() *TripUpdateOne {
	tuo.mutation.ClearDriverID()
	return tuo
}

// SetPickupLat sets the "pickup_lat" field.
func (tuo *TripUpdateOne) SetPickupLat(f float64) *TripUpdateOne {
	tuo.mutation.ResetPickupLat()
	tuo.mutation.SetPickupLat(f)
	return tuo
}

// SetNillablePickupLat sets the "pickup_lat" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillablePickupLat(f *float64) *TripUpdateOne {
	if f != nil {
		tuo.SetPickupLat(*f)
	}
	return tuo
}

// AddPickupLat adds f to the "pickup_lat" field.
func (tuo *TripUpdateOne) AddPickupLat(f float64) *TripUpdateOne {
	tuo.mutation.AddPickupLat(f)
	return tuo
}

// SetPickupLong sets the "pickup_long" field.
func (tuo *TripUpdateOne) SetPickupLong(f float64) *TripUpdateOne {
	tuo.mutation.ResetPickupLong()
	tuo.mutation.SetPickupLong(f)
	return tuo
}

// SetNillablePickupLong sets the "pickup_long" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillablePickupLong(f *float64) *TripUpdateOne {
	if f != nil {
		tuo.SetPickupLong(*f)
	}
	return tuo
}

// AddPickupLong adds f to the "pickup_long" field.
func (tuo *TripUpdateOne) AddPickupLong(f float64) *TripUpdateOne {
	tuo.mutation.AddPickupLong(f)
	return tuo
}

// SetDropLat sets the "drop_lat" field.
func (tuo *TripUpdateOne) SetDropLat(f float64) *TripUpdateOne {
	tuo.mutation.ResetDropLat()
	tuo.mutation.SetDropLat(f)
	return tuo
}

// SetNillableDropLat sets the "drop_lat" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableDropLat(f *float64) *TripUpdateOne {
	if f != nil {
		tuo.SetDropLat(*f)
	}
	return tuo
}

// AddDropLat adds f to the "drop_lat" field.
func (tuo *TripUpdateOne) AddDropLat(f float64) *TripUpdateOne {
	tuo.mutation.AddDropLat(f)
	return tuo
}

// SetDropLong sets the "drop_long" field.
func (tuo *TripUpdateOne) SetDropLong(f float64) *TripUpdateOne {
	tuo.mutation.ResetDropLong()
	tuo.mutation.SetDropLong(f)
	return tuo
}

// SetNillableDropLong sets the "drop_long" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableDropLong(f *float64) *TripUpdateOne {
	if f != nil {
		tuo.SetDropLong(*f)
	}
	return tuo
}

// AddDropLong adds f to the "drop_long" field.
func (tuo *TripUpdateOne) AddDropLong(f float64) *TripUpdateOne {
	tuo.mutation.AddDropLong(f)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TripUpdateOne) SetStatus(t trip.Status) *TripUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableStatus(t *trip.Status) *TripUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetDistanceKm sets the "distance_km" field.
func (tuo *TripUpdateOne) SetDistanceKm(f float64) *TripUpdateOne {
	tuo.mutation.ResetDistanceKm()
	tuo.mutation.SetDistanceKm(f)
	return tuo
}

// SetNillableDistanceKm sets the "distance_km" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableDistanceKm(f *float64) *TripUpdateOne {
	if f != nil {
		tuo.SetDistanceKm(*f)
	}
	return tuo
}

// AddDistanceKm adds f to the "distance_km" field.
func (tuo *TripUpdateOne) AddDistanceKm(f float64) *TripUpdateOne {
	tuo.mutation.AddDistanceKm(f)
	return tuo
}

// ClearDistanceKm clears the value of the "distance_km" field.
func (tuo *TripUpdateOne) ClearDistanceKm() *TripUpdateOne {
	tuo.mutation.ClearDistanceKm()
	return tuo
}

// SetNumeric sets the "numeric" field.
func (tuo *TripUpdateOne) SetNumeric(s string) *TripUpdateOne {
	tuo.mutation.SetNumeric(s)
	return tuo
}

// SetNillableNumeric sets the "numeric" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableNumeric(s *string) *TripUpdateOne {
	if s != nil {
		tuo.SetNumeric(*s)
	}
	return tuo
}

// ClearNumeric clears the value of the "numeric" field.
func (tuo *TripUpdateOne) ClearNumeric() *TripUpdateOne {
	tuo.mutation.ClearNumeric()
	return tuo
}

// SetIsPaid sets the "is_paid" field.
func (tuo *TripUpdateOne) SetIsPaid(b bool) *TripUpdateOne {
	tuo.mutation.SetIsPaid(b)
	return tuo
}

// SetNillableIsPaid sets the "is_paid" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableIsPaid(b *bool) *TripUpdateOne {
	if b != nil {
		tuo.SetIsPaid(*b)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TripUpdateOne) SetCreatedAt(t time.Time) *TripUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableCreatedAt(t *time.Time) *TripUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetStartedAt sets the "started_at" field.
func (tuo *TripUpdateOne) SetStartedAt(t time.Time) *TripUpdateOne {
	tuo.mutation.SetStartedAt(t)
	return tuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableStartedAt(t *time.Time) *TripUpdateOne {
	if t != nil {
		tuo.SetStartedAt(*t)
	}
	return tuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (tuo *TripUpdateOne) ClearStartedAt() *TripUpdateOne {
	tuo.mutation.ClearStartedAt()
	return tuo
}

// SetCompletedAt sets the "completed_at" field.
func (tuo *TripUpdateOne) SetCompletedAt(t time.Time) *TripUpdateOne {
	tuo.mutation.SetCompletedAt(t)
	return tuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (tuo *TripUpdateOne) SetNillableCompletedAt(t *time.Time) *TripUpdateOne {
	if t != nil {
		tuo.SetCompletedAt(*t)
	}
	return tuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (tuo *TripUpdateOne) ClearCompletedAt() *TripUpdateOne {
	tuo.mutation.ClearCompletedAt()
	return tuo
}

// SetUser sets the "user" edge to the User entity.
func (tuo *TripUpdateOne) SetUser(u *User) *TripUpdateOne {
	return tuo.SetUserID(u.ID)
}

// SetDriver sets the "driver" edge to the DriverProfile entity.
func (tuo *TripUpdateOne) SetDriver(d *DriverProfile) *TripUpdateOne {
	return tuo.SetDriverID(d.ID)
}

// AddPaymentIDs adds the "payment" edge to the Payment entity by IDs.
func (tuo *TripUpdateOne) AddPaymentIDs(ids ...uuid.UUID) *TripUpdateOne {
	tuo.mutation.AddPaymentIDs(ids...)
	return tuo
}

// AddPayment adds the "payment" edges to the Payment entity.
func (tuo *TripUpdateOne) AddPayment(p ...*Payment) *TripUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPaymentIDs(ids...)
}

// AddRatingIDs adds the "ratings" edge to the TripRating entity by IDs.
func (tuo *TripUpdateOne) AddRatingIDs(ids ...uuid.UUID) *TripUpdateOne {
	tuo.mutation.AddRatingIDs(ids...)
	return tuo
}

// AddRatings adds the "ratings" edges to the TripRating entity.
func (tuo *TripUpdateOne) AddRatings(t ...*TripRating) *TripUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddRatingIDs(ids...)
}

// Mutation returns the TripMutation object of the builder.
func (tuo *TripUpdateOne) Mutation() *TripMutation {
	return tuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (tuo *TripUpdateOne) ClearUser() *TripUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearDriver clears the "driver" edge to the DriverProfile entity.
func (tuo *TripUpdateOne) ClearDriver() *TripUpdateOne {
	tuo.mutation.ClearDriver()
	return tuo
}

// ClearPayment clears all "payment" edges to the Payment entity.
func (tuo *TripUpdateOne) ClearPayment() *TripUpdateOne {
	tuo.mutation.ClearPayment()
	return tuo
}

// RemovePaymentIDs removes the "payment" edge to Payment entities by IDs.
func (tuo *TripUpdateOne) RemovePaymentIDs(ids ...uuid.UUID) *TripUpdateOne {
	tuo.mutation.RemovePaymentIDs(ids...)
	return tuo
}

// RemovePayment removes "payment" edges to Payment entities.
func (tuo *TripUpdateOne) RemovePayment(p ...*Payment) *TripUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePaymentIDs(ids...)
}

// ClearRatings clears all "ratings" edges to the TripRating entity.
func (tuo *TripUpdateOne) ClearRatings() *TripUpdateOne {
	tuo.mutation.ClearRatings()
	return tuo
}

// RemoveRatingIDs removes the "ratings" edge to TripRating entities by IDs.
func (tuo *TripUpdateOne) RemoveRatingIDs(ids ...uuid.UUID) *TripUpdateOne {
	tuo.mutation.RemoveRatingIDs(ids...)
	return tuo
}

// RemoveRatings removes "ratings" edges to TripRating entities.
func (tuo *TripUpdateOne) RemoveRatings(t ...*TripRating) *TripUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveRatingIDs(ids...)
}

// Where appends a list predicates to the TripUpdate builder.
func (tuo *TripUpdateOne) Where(ps ...predicate.Trip) *TripUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TripUpdateOne) Select(field string, fields ...string) *TripUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Trip entity.
func (tuo *TripUpdateOne) Save(ctx context.Context) (*Trip, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TripUpdateOne) SaveX(ctx context.Context) *Trip {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TripUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TripUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TripUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := trip.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Trip.status": %w`, err)}
		}
	}
	if tuo.mutation.UserCleared() && len(tuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Trip.user"`)
	}
	return nil
}

func (tuo *TripUpdateOne) sqlSave(ctx context.Context) (_node *Trip, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trip.Table, trip.Columns, sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Trip.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trip.FieldID)
		for _, f := range fields {
			if !trip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.PickupLat(); ok {
		_spec.SetField(trip.FieldPickupLat, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedPickupLat(); ok {
		_spec.AddField(trip.FieldPickupLat, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.PickupLong(); ok {
		_spec.SetField(trip.FieldPickupLong, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedPickupLong(); ok {
		_spec.AddField(trip.FieldPickupLong, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.DropLat(); ok {
		_spec.SetField(trip.FieldDropLat, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedDropLat(); ok {
		_spec.AddField(trip.FieldDropLat, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.DropLong(); ok {
		_spec.SetField(trip.FieldDropLong, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedDropLong(); ok {
		_spec.AddField(trip.FieldDropLong, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(trip.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.DistanceKm(); ok {
		_spec.SetField(trip.FieldDistanceKm, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedDistanceKm(); ok {
		_spec.AddField(trip.FieldDistanceKm, field.TypeFloat64, value)
	}
	if tuo.mutation.DistanceKmCleared() {
		_spec.ClearField(trip.FieldDistanceKm, field.TypeFloat64)
	}
	if value, ok := tuo.mutation.Numeric(); ok {
		_spec.SetField(trip.FieldNumeric, field.TypeString, value)
	}
	if tuo.mutation.NumericCleared() {
		_spec.ClearField(trip.FieldNumeric, field.TypeString)
	}
	if value, ok := tuo.mutation.IsPaid(); ok {
		_spec.SetField(trip.FieldIsPaid, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(trip.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.StartedAt(); ok {
		_spec.SetField(trip.FieldStartedAt, field.TypeTime, value)
	}
	if tuo.mutation.StartedAtCleared() {
		_spec.ClearField(trip.FieldStartedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.CompletedAt(); ok {
		_spec.SetField(trip.FieldCompletedAt, field.TypeTime, value)
	}
	if tuo.mutation.CompletedAtCleared() {
		_spec.ClearField(trip.FieldCompletedAt, field.TypeTime)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.UserTable,
			Columns: []string{trip.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.DriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.DriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trip.DriverTable,
			Columns: []string{trip.DriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.PaymentTable,
			Columns: []string{trip.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPaymentIDs(); len(nodes) > 0 && !tuo.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.PaymentTable,
			Columns: []string{trip.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.PaymentTable,
			Columns: []string{trip.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(payment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.RatingsTable,
			Columns: []string{trip.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRatingsIDs(); len(nodes) > 0 && !tuo.mutation.RatingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.RatingsTable,
			Columns: []string{trip.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RatingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   trip.RatingsTable,
			Columns: []string{trip.RatingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Trip{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
