// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DriverProfilesColumns holds the columns for the "driver_profiles" table.
	DriverProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "license_number", Type: field.TypeString},
		{Name: "ktp_number", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "approved", "reject"}, Default: "pending"},
		{Name: "vehicle_info", Type: field.TypeString},
		{Name: "current_lat", Type: field.TypeFloat64, Nullable: true},
		{Name: "current_long", Type: field.TypeFloat64, Nullable: true},
		{Name: "is_active", Type: field.TypeBool, Default: false},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// DriverProfilesTable holds the schema information for the "driver_profiles" table.
	DriverProfilesTable = &schema.Table{
		Name:       "driver_profiles",
		Columns:    DriverProfilesColumns,
		PrimaryKey: []*schema.Column{DriverProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "driver_profiles_users_user_driver",
				Columns:    []*schema.Column{DriverProfilesColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PaymentsColumns holds the columns for the "payments" table.
	PaymentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "payment_method", Type: field.TypeString},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "success", "failed"}},
		{Name: "paid_at", Type: field.TypeTime},
		{Name: "trip_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// PaymentsTable holds the schema information for the "payments" table.
	PaymentsTable = &schema.Table{
		Name:       "payments",
		Columns:    PaymentsColumns,
		PrimaryKey: []*schema.Column{PaymentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "payments_trips_payment",
				Columns:    []*schema.Column{PaymentsColumns[5]},
				RefColumns: []*schema.Column{TripsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "payments_users_payments",
				Columns:    []*schema.Column{PaymentsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TripsColumns holds the columns for the "trips" table.
	TripsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "pickup_lat", Type: field.TypeFloat64},
		{Name: "pickup_long", Type: field.TypeFloat64},
		{Name: "drop_lat", Type: field.TypeFloat64},
		{Name: "drop_long", Type: field.TypeFloat64},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"requested", "accepted", "ongoing", "completed", "cancelled"}},
		{Name: "distance_km", Type: field.TypeFloat64, Nullable: true},
		{Name: "numeric", Type: field.TypeString, Nullable: true},
		{Name: "is_paid", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "driver_profile_trips_driver", Type: field.TypeUUID, Nullable: true},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "driver_id", Type: field.TypeUUID, Nullable: true},
	}
	// TripsTable holds the schema information for the "trips" table.
	TripsTable = &schema.Table{
		Name:       "trips",
		Columns:    TripsColumns,
		PrimaryKey: []*schema.Column{TripsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "trips_driver_profiles_trips_driver",
				Columns:    []*schema.Column{TripsColumns[12]},
				RefColumns: []*schema.Column{DriverProfilesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "trips_users_user_trips",
				Columns:    []*schema.Column{TripsColumns[13]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "trips_users_driver_trips",
				Columns:    []*schema.Column{TripsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TripRatingsColumns holds the columns for the "trip_ratings" table.
	TripRatingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "rating", Type: field.TypeInt},
		{Name: "comment", Type: field.TypeString, Size: 2147483647, Default: "-"},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
		{Name: "trip_id", Type: field.TypeUUID},
		{Name: "from_user_id", Type: field.TypeUUID},
		{Name: "to_user_id", Type: field.TypeUUID},
	}
	// TripRatingsTable holds the schema information for the "trip_ratings" table.
	TripRatingsTable = &schema.Table{
		Name:       "trip_ratings",
		Columns:    TripRatingsColumns,
		PrimaryKey: []*schema.Column{TripRatingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "trip_ratings_trips_ratings",
				Columns:    []*schema.Column{TripRatingsColumns[4]},
				RefColumns: []*schema.Column{TripsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "trip_ratings_users_given_ratings",
				Columns:    []*schema.Column{TripRatingsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "trip_ratings_users_received_ratings",
				Columns:    []*schema.Column{TripRatingsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "phone", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "role", Type: field.TypeEnum, Enums: []string{"user", "driver", "admin"}},
		{Name: "is_verified", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime, Default: "CURRENT_TIMESTAMP"},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UsersAdminsColumns holds the columns for the "users_admins" table.
	UsersAdminsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "status_admin", Type: field.TypeInt, Default: 0},
	}
	// UsersAdminsTable holds the schema information for the "users_admins" table.
	UsersAdminsTable = &schema.Table{
		Name:       "users_admins",
		Columns:    UsersAdminsColumns,
		PrimaryKey: []*schema.Column{UsersAdminsColumns[0]},
	}
	// WalletsColumns holds the columns for the "wallets" table.
	WalletsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "balance", Type: field.TypeFloat64},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// WalletsTable holds the schema information for the "wallets" table.
	WalletsTable = &schema.Table{
		Name:       "wallets",
		Columns:    WalletsColumns,
		PrimaryKey: []*schema.Column{WalletsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "wallets_users_user_balance",
				Columns:    []*schema.Column{WalletsColumns[2]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DriverProfilesTable,
		PaymentsTable,
		TripsTable,
		TripRatingsTable,
		UsersTable,
		UsersAdminsTable,
		WalletsTable,
	}
)

func init() {
	DriverProfilesTable.ForeignKeys[0].RefTable = UsersTable
	PaymentsTable.ForeignKeys[0].RefTable = TripsTable
	PaymentsTable.ForeignKeys[1].RefTable = UsersTable
	TripsTable.ForeignKeys[0].RefTable = DriverProfilesTable
	TripsTable.ForeignKeys[1].RefTable = UsersTable
	TripsTable.ForeignKeys[2].RefTable = UsersTable
	TripRatingsTable.ForeignKeys[0].RefTable = TripsTable
	TripRatingsTable.ForeignKeys[1].RefTable = UsersTable
	TripRatingsTable.ForeignKeys[2].RefTable = UsersTable
	WalletsTable.ForeignKeys[0].RefTable = UsersTable
}
