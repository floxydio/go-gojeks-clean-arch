// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gojeksrepo/ent/driverprofile"
	"gojeksrepo/ent/predicate"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DriverProfileUpdate is the builder for updating DriverProfile entities.
type DriverProfileUpdate struct {
	config
	hooks    []Hook
	mutation *DriverProfileMutation
}

// Where appends a list predicates to the DriverProfileUpdate builder.
func (dpu *DriverProfileUpdate) Where(ps ...predicate.DriverProfile) *DriverProfileUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetLicenseNumber sets the "license_number" field.
func (dpu *DriverProfileUpdate) SetLicenseNumber(s string) *DriverProfileUpdate {
	dpu.mutation.SetLicenseNumber(s)
	return dpu
}

// SetNillableLicenseNumber sets the "license_number" field if the given value is not nil.
func (dpu *DriverProfileUpdate) SetNillableLicenseNumber(s *string) *DriverProfileUpdate {
	if s != nil {
		dpu.SetLicenseNumber(*s)
	}
	return dpu
}

// SetKtpNumber sets the "ktp_number" field.
func (dpu *DriverProfileUpdate) SetKtpNumber(s string) *DriverProfileUpdate {
	dpu.mutation.SetKtpNumber(s)
	return dpu
}

// SetNillableKtpNumber sets the "ktp_number" field if the given value is not nil.
func (dpu *DriverProfileUpdate) SetNillableKtpNumber(s *string) *DriverProfileUpdate {
	if s != nil {
		dpu.SetKtpNumber(*s)
	}
	return dpu
}

// SetStatus sets the "status" field.
func (dpu *DriverProfileUpdate) SetStatus(d driverprofile.Status) *DriverProfileUpdate {
	dpu.mutation.SetStatus(d)
	return dpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dpu *DriverProfileUpdate) SetNillableStatus(d *driverprofile.Status) *DriverProfileUpdate {
	if d != nil {
		dpu.SetStatus(*d)
	}
	return dpu
}

// SetVehicleInfo sets the "vehicle_info" field.
func (dpu *DriverProfileUpdate) SetVehicleInfo(s string) *DriverProfileUpdate {
	dpu.mutation.SetVehicleInfo(s)
	return dpu
}

// SetNillableVehicleInfo sets the "vehicle_info" field if the given value is not nil.
func (dpu *DriverProfileUpdate) SetNillableVehicleInfo(s *string) *DriverProfileUpdate {
	if s != nil {
		dpu.SetVehicleInfo(*s)
	}
	return dpu
}

// SetCurrentLat sets the "current_lat" field.
func (dpu *DriverProfileUpdate) SetCurrentLat(f float64) *DriverProfileUpdate {
	dpu.mutation.ResetCurrentLat()
	dpu.mutation.SetCurrentLat(f)
	return dpu
}

// SetNillableCurrentLat sets the "current_lat" field if the given value is not nil.
func (dpu *DriverProfileUpdate) SetNillableCurrentLat(f *float64) *DriverProfileUpdate {
	if f != nil {
		dpu.SetCurrentLat(*f)
	}
	return dpu
}

// AddCurrentLat adds f to the "current_lat" field.
func (dpu *DriverProfileUpdate) AddCurrentLat(f float64) *DriverProfileUpdate {
	dpu.mutation.AddCurrentLat(f)
	return dpu
}

// ClearCurrentLat clears the value of the "current_lat" field.
func (dpu *DriverProfileUpdate) ClearCurrentLat() *DriverProfileUpdate {
	dpu.mutation.ClearCurrentLat()
	return dpu
}

// SetCurrentLong sets the "current_long" field.
func (dpu *DriverProfileUpdate) SetCurrentLong(f float64) *DriverProfileUpdate {
	dpu.mutation.ResetCurrentLong()
	dpu.mutation.SetCurrentLong(f)
	return dpu
}

// SetNillableCurrentLong sets the "current_long" field if the given value is not nil.
func (dpu *DriverProfileUpdate) SetNillableCurrentLong(f *float64) *DriverProfileUpdate {
	if f != nil {
		dpu.SetCurrentLong(*f)
	}
	return dpu
}

// AddCurrentLong adds f to the "current_long" field.
func (dpu *DriverProfileUpdate) AddCurrentLong(f float64) *DriverProfileUpdate {
	dpu.mutation.AddCurrentLong(f)
	return dpu
}

// ClearCurrentLong clears the value of the "current_long" field.
func (dpu *DriverProfileUpdate) ClearCurrentLong() *DriverProfileUpdate {
	dpu.mutation.ClearCurrentLong()
	return dpu
}

// SetIsActive sets the "is_active" field.
func (dpu *DriverProfileUpdate) SetIsActive(b bool) *DriverProfileUpdate {
	dpu.mutation.SetIsActive(b)
	return dpu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (dpu *DriverProfileUpdate) SetNillableIsActive(b *bool) *DriverProfileUpdate {
	if b != nil {
		dpu.SetIsActive(*b)
	}
	return dpu
}

// SetUserID sets the "user_id" field.
func (dpu *DriverProfileUpdate) SetUserID(u uuid.UUID) *DriverProfileUpdate {
	dpu.mutation.SetUserID(u)
	return dpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dpu *DriverProfileUpdate) SetNillableUserID(u *uuid.UUID) *DriverProfileUpdate {
	if u != nil {
		dpu.SetUserID(*u)
	}
	return dpu
}

// SetUser sets the "user" edge to the User entity.
func (dpu *DriverProfileUpdate) SetUser(u *User) *DriverProfileUpdate {
	return dpu.SetUserID(u.ID)
}

// AddTripsDriverIDs adds the "trips_driver" edge to the Trip entity by IDs.
func (dpu *DriverProfileUpdate) AddTripsDriverIDs(ids ...uuid.UUID) *DriverProfileUpdate {
	dpu.mutation.AddTripsDriverIDs(ids...)
	return dpu
}

// AddTripsDriver adds the "trips_driver" edges to the Trip entity.
func (dpu *DriverProfileUpdate) AddTripsDriver(t ...*Trip) *DriverProfileUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dpu.AddTripsDriverIDs(ids...)
}

// Mutation returns the DriverProfileMutation object of the builder.
func (dpu *DriverProfileUpdate) Mutation() *DriverProfileMutation {
	return dpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (dpu *DriverProfileUpdate) ClearUser() *DriverProfileUpdate {
	dpu.mutation.ClearUser()
	return dpu
}

// ClearTripsDriver clears all "trips_driver" edges to the Trip entity.
func (dpu *DriverProfileUpdate) ClearTripsDriver() *DriverProfileUpdate {
	dpu.mutation.ClearTripsDriver()
	return dpu
}

// RemoveTripsDriverIDs removes the "trips_driver" edge to Trip entities by IDs.
func (dpu *DriverProfileUpdate) RemoveTripsDriverIDs(ids ...uuid.UUID) *DriverProfileUpdate {
	dpu.mutation.RemoveTripsDriverIDs(ids...)
	return dpu
}

// RemoveTripsDriver removes "trips_driver" edges to Trip entities.
func (dpu *DriverProfileUpdate) RemoveTripsDriver(t ...*Trip) *DriverProfileUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dpu.RemoveTripsDriverIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DriverProfileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dpu.sqlSave, dpu.mutation, dpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DriverProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DriverProfileUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DriverProfileUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DriverProfileUpdate) check() error {
	if v, ok := dpu.mutation.Status(); ok {
		if err := driverprofile.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DriverProfile.status": %w`, err)}
		}
	}
	if dpu.mutation.UserCleared() && len(dpu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DriverProfile.user"`)
	}
	return nil
}

func (dpu *DriverProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(driverprofile.Table, driverprofile.Columns, sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID))
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.LicenseNumber(); ok {
		_spec.SetField(driverprofile.FieldLicenseNumber, field.TypeString, value)
	}
	if value, ok := dpu.mutation.KtpNumber(); ok {
		_spec.SetField(driverprofile.FieldKtpNumber, field.TypeString, value)
	}
	if value, ok := dpu.mutation.Status(); ok {
		_spec.SetField(driverprofile.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dpu.mutation.VehicleInfo(); ok {
		_spec.SetField(driverprofile.FieldVehicleInfo, field.TypeString, value)
	}
	if value, ok := dpu.mutation.CurrentLat(); ok {
		_spec.SetField(driverprofile.FieldCurrentLat, field.TypeFloat64, value)
	}
	if value, ok := dpu.mutation.AddedCurrentLat(); ok {
		_spec.AddField(driverprofile.FieldCurrentLat, field.TypeFloat64, value)
	}
	if dpu.mutation.CurrentLatCleared() {
		_spec.ClearField(driverprofile.FieldCurrentLat, field.TypeFloat64)
	}
	if value, ok := dpu.mutation.CurrentLong(); ok {
		_spec.SetField(driverprofile.FieldCurrentLong, field.TypeFloat64, value)
	}
	if value, ok := dpu.mutation.AddedCurrentLong(); ok {
		_spec.AddField(driverprofile.FieldCurrentLong, field.TypeFloat64, value)
	}
	if dpu.mutation.CurrentLongCleared() {
		_spec.ClearField(driverprofile.FieldCurrentLong, field.TypeFloat64)
	}
	if value, ok := dpu.mutation.IsActive(); ok {
		_spec.SetField(driverprofile.FieldIsActive, field.TypeBool, value)
	}
	if dpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   driverprofile.UserTable,
			Columns: []string{driverprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   driverprofile.UserTable,
			Columns: []string{driverprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.TripsDriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   driverprofile.TripsDriverTable,
			Columns: []string{driverprofile.TripsDriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedTripsDriverIDs(); len(nodes) > 0 && !dpu.mutation.TripsDriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   driverprofile.TripsDriverTable,
			Columns: []string{driverprofile.TripsDriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.TripsDriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   driverprofile.TripsDriverTable,
			Columns: []string{driverprofile.TripsDriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{driverprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dpu.mutation.done = true
	return n, nil
}

// DriverProfileUpdateOne is the builder for updating a single DriverProfile entity.
type DriverProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DriverProfileMutation
}

// SetLicenseNumber sets the "license_number" field.
func (dpuo *DriverProfileUpdateOne) SetLicenseNumber(s string) *DriverProfileUpdateOne {
	dpuo.mutation.SetLicenseNumber(s)
	return dpuo
}

// SetNillableLicenseNumber sets the "license_number" field if the given value is not nil.
func (dpuo *DriverProfileUpdateOne) SetNillableLicenseNumber(s *string) *DriverProfileUpdateOne {
	if s != nil {
		dpuo.SetLicenseNumber(*s)
	}
	return dpuo
}

// SetKtpNumber sets the "ktp_number" field.
func (dpuo *DriverProfileUpdateOne) SetKtpNumber(s string) *DriverProfileUpdateOne {
	dpuo.mutation.SetKtpNumber(s)
	return dpuo
}

// SetNillableKtpNumber sets the "ktp_number" field if the given value is not nil.
func (dpuo *DriverProfileUpdateOne) SetNillableKtpNumber(s *string) *DriverProfileUpdateOne {
	if s != nil {
		dpuo.SetKtpNumber(*s)
	}
	return dpuo
}

// SetStatus sets the "status" field.
func (dpuo *DriverProfileUpdateOne) SetStatus(d driverprofile.Status) *DriverProfileUpdateOne {
	dpuo.mutation.SetStatus(d)
	return dpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dpuo *DriverProfileUpdateOne) SetNillableStatus(d *driverprofile.Status) *DriverProfileUpdateOne {
	if d != nil {
		dpuo.SetStatus(*d)
	}
	return dpuo
}

// SetVehicleInfo sets the "vehicle_info" field.
func (dpuo *DriverProfileUpdateOne) SetVehicleInfo(s string) *DriverProfileUpdateOne {
	dpuo.mutation.SetVehicleInfo(s)
	return dpuo
}

// SetNillableVehicleInfo sets the "vehicle_info" field if the given value is not nil.
func (dpuo *DriverProfileUpdateOne) SetNillableVehicleInfo(s *string) *DriverProfileUpdateOne {
	if s != nil {
		dpuo.SetVehicleInfo(*s)
	}
	return dpuo
}

// SetCurrentLat sets the "current_lat" field.
func (dpuo *DriverProfileUpdateOne) SetCurrentLat(f float64) *DriverProfileUpdateOne {
	dpuo.mutation.ResetCurrentLat()
	dpuo.mutation.SetCurrentLat(f)
	return dpuo
}

// SetNillableCurrentLat sets the "current_lat" field if the given value is not nil.
func (dpuo *DriverProfileUpdateOne) SetNillableCurrentLat(f *float64) *DriverProfileUpdateOne {
	if f != nil {
		dpuo.SetCurrentLat(*f)
	}
	return dpuo
}

// AddCurrentLat adds f to the "current_lat" field.
func (dpuo *DriverProfileUpdateOne) AddCurrentLat(f float64) *DriverProfileUpdateOne {
	dpuo.mutation.AddCurrentLat(f)
	return dpuo
}

// ClearCurrentLat clears the value of the "current_lat" field.
func (dpuo *DriverProfileUpdateOne) ClearCurrentLat() *DriverProfileUpdateOne {
	dpuo.mutation.ClearCurrentLat()
	return dpuo
}

// SetCurrentLong sets the "current_long" field.
func (dpuo *DriverProfileUpdateOne) SetCurrentLong(f float64) *DriverProfileUpdateOne {
	dpuo.mutation.ResetCurrentLong()
	dpuo.mutation.SetCurrentLong(f)
	return dpuo
}

// SetNillableCurrentLong sets the "current_long" field if the given value is not nil.
func (dpuo *DriverProfileUpdateOne) SetNillableCurrentLong(f *float64) *DriverProfileUpdateOne {
	if f != nil {
		dpuo.SetCurrentLong(*f)
	}
	return dpuo
}

// AddCurrentLong adds f to the "current_long" field.
func (dpuo *DriverProfileUpdateOne) AddCurrentLong(f float64) *DriverProfileUpdateOne {
	dpuo.mutation.AddCurrentLong(f)
	return dpuo
}

// ClearCurrentLong clears the value of the "current_long" field.
func (dpuo *DriverProfileUpdateOne) ClearCurrentLong() *DriverProfileUpdateOne {
	dpuo.mutation.ClearCurrentLong()
	return dpuo
}

// SetIsActive sets the "is_active" field.
func (dpuo *DriverProfileUpdateOne) SetIsActive(b bool) *DriverProfileUpdateOne {
	dpuo.mutation.SetIsActive(b)
	return dpuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (dpuo *DriverProfileUpdateOne) SetNillableIsActive(b *bool) *DriverProfileUpdateOne {
	if b != nil {
		dpuo.SetIsActive(*b)
	}
	return dpuo
}

// SetUserID sets the "user_id" field.
func (dpuo *DriverProfileUpdateOne) SetUserID(u uuid.UUID) *DriverProfileUpdateOne {
	dpuo.mutation.SetUserID(u)
	return dpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dpuo *DriverProfileUpdateOne) SetNillableUserID(u *uuid.UUID) *DriverProfileUpdateOne {
	if u != nil {
		dpuo.SetUserID(*u)
	}
	return dpuo
}

// SetUser sets the "user" edge to the User entity.
func (dpuo *DriverProfileUpdateOne) SetUser(u *User) *DriverProfileUpdateOne {
	return dpuo.SetUserID(u.ID)
}

// AddTripsDriverIDs adds the "trips_driver" edge to the Trip entity by IDs.
func (dpuo *DriverProfileUpdateOne) AddTripsDriverIDs(ids ...uuid.UUID) *DriverProfileUpdateOne {
	dpuo.mutation.AddTripsDriverIDs(ids...)
	return dpuo
}

// AddTripsDriver adds the "trips_driver" edges to the Trip entity.
func (dpuo *DriverProfileUpdateOne) AddTripsDriver(t ...*Trip) *DriverProfileUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dpuo.AddTripsDriverIDs(ids...)
}

// Mutation returns the DriverProfileMutation object of the builder.
func (dpuo *DriverProfileUpdateOne) Mutation() *DriverProfileMutation {
	return dpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (dpuo *DriverProfileUpdateOne) ClearUser() *DriverProfileUpdateOne {
	dpuo.mutation.ClearUser()
	return dpuo
}

// ClearTripsDriver clears all "trips_driver" edges to the Trip entity.
func (dpuo *DriverProfileUpdateOne) ClearTripsDriver() *DriverProfileUpdateOne {
	dpuo.mutation.ClearTripsDriver()
	return dpuo
}

// RemoveTripsDriverIDs removes the "trips_driver" edge to Trip entities by IDs.
func (dpuo *DriverProfileUpdateOne) RemoveTripsDriverIDs(ids ...uuid.UUID) *DriverProfileUpdateOne {
	dpuo.mutation.RemoveTripsDriverIDs(ids...)
	return dpuo
}

// RemoveTripsDriver removes "trips_driver" edges to Trip entities.
func (dpuo *DriverProfileUpdateOne) RemoveTripsDriver(t ...*Trip) *DriverProfileUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dpuo.RemoveTripsDriverIDs(ids...)
}

// Where appends a list predicates to the DriverProfileUpdate builder.
func (dpuo *DriverProfileUpdateOne) Where(ps ...predicate.DriverProfile) *DriverProfileUpdateOne {
	dpuo.mutation.Where(ps...)
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DriverProfileUpdateOne) Select(field string, fields ...string) *DriverProfileUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DriverProfile entity.
func (dpuo *DriverProfileUpdateOne) Save(ctx context.Context) (*DriverProfile, error) {
	return withHooks(ctx, dpuo.sqlSave, dpuo.mutation, dpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DriverProfileUpdateOne) SaveX(ctx context.Context) *DriverProfile {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DriverProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DriverProfileUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DriverProfileUpdateOne) check() error {
	if v, ok := dpuo.mutation.Status(); ok {
		if err := driverprofile.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DriverProfile.status": %w`, err)}
		}
	}
	if dpuo.mutation.UserCleared() && len(dpuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DriverProfile.user"`)
	}
	return nil
}

func (dpuo *DriverProfileUpdateOne) sqlSave(ctx context.Context) (_node *DriverProfile, err error) {
	if err := dpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(driverprofile.Table, driverprofile.Columns, sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID))
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DriverProfile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, driverprofile.FieldID)
		for _, f := range fields {
			if !driverprofile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != driverprofile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.LicenseNumber(); ok {
		_spec.SetField(driverprofile.FieldLicenseNumber, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.KtpNumber(); ok {
		_spec.SetField(driverprofile.FieldKtpNumber, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.Status(); ok {
		_spec.SetField(driverprofile.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := dpuo.mutation.VehicleInfo(); ok {
		_spec.SetField(driverprofile.FieldVehicleInfo, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.CurrentLat(); ok {
		_spec.SetField(driverprofile.FieldCurrentLat, field.TypeFloat64, value)
	}
	if value, ok := dpuo.mutation.AddedCurrentLat(); ok {
		_spec.AddField(driverprofile.FieldCurrentLat, field.TypeFloat64, value)
	}
	if dpuo.mutation.CurrentLatCleared() {
		_spec.ClearField(driverprofile.FieldCurrentLat, field.TypeFloat64)
	}
	if value, ok := dpuo.mutation.CurrentLong(); ok {
		_spec.SetField(driverprofile.FieldCurrentLong, field.TypeFloat64, value)
	}
	if value, ok := dpuo.mutation.AddedCurrentLong(); ok {
		_spec.AddField(driverprofile.FieldCurrentLong, field.TypeFloat64, value)
	}
	if dpuo.mutation.CurrentLongCleared() {
		_spec.ClearField(driverprofile.FieldCurrentLong, field.TypeFloat64)
	}
	if value, ok := dpuo.mutation.IsActive(); ok {
		_spec.SetField(driverprofile.FieldIsActive, field.TypeBool, value)
	}
	if dpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   driverprofile.UserTable,
			Columns: []string{driverprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   driverprofile.UserTable,
			Columns: []string{driverprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.TripsDriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   driverprofile.TripsDriverTable,
			Columns: []string{driverprofile.TripsDriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedTripsDriverIDs(); len(nodes) > 0 && !dpuo.mutation.TripsDriverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   driverprofile.TripsDriverTable,
			Columns: []string{driverprofile.TripsDriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.TripsDriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   driverprofile.TripsDriverTable,
			Columns: []string{driverprofile.TripsDriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DriverProfile{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{driverprofile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dpuo.mutation.done = true
	return _node, nil
}
