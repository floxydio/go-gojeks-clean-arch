// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gojeksrepo/ent/driverprofile"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/user"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DriverProfileCreate is the builder for creating a DriverProfile entity.
type DriverProfileCreate struct {
	config
	mutation *DriverProfileMutation
	hooks    []Hook
}

// SetLicenseNumber sets the "license_number" field.
func (dpc *DriverProfileCreate) SetLicenseNumber(s string) *DriverProfileCreate {
	dpc.mutation.SetLicenseNumber(s)
	return dpc
}

// SetKtpNumber sets the "ktp_number" field.
func (dpc *DriverProfileCreate) SetKtpNumber(s string) *DriverProfileCreate {
	dpc.mutation.SetKtpNumber(s)
	return dpc
}

// SetStatus sets the "status" field.
func (dpc *DriverProfileCreate) SetStatus(d driverprofile.Status) *DriverProfileCreate {
	dpc.mutation.SetStatus(d)
	return dpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dpc *DriverProfileCreate) SetNillableStatus(d *driverprofile.Status) *DriverProfileCreate {
	if d != nil {
		dpc.SetStatus(*d)
	}
	return dpc
}

// SetVehicleInfo sets the "vehicle_info" field.
func (dpc *DriverProfileCreate) SetVehicleInfo(s string) *DriverProfileCreate {
	dpc.mutation.SetVehicleInfo(s)
	return dpc
}

// SetCurrentLat sets the "current_lat" field.
func (dpc *DriverProfileCreate) SetCurrentLat(f float64) *DriverProfileCreate {
	dpc.mutation.SetCurrentLat(f)
	return dpc
}

// SetNillableCurrentLat sets the "current_lat" field if the given value is not nil.
func (dpc *DriverProfileCreate) SetNillableCurrentLat(f *float64) *DriverProfileCreate {
	if f != nil {
		dpc.SetCurrentLat(*f)
	}
	return dpc
}

// SetCurrentLong sets the "current_long" field.
func (dpc *DriverProfileCreate) SetCurrentLong(f float64) *DriverProfileCreate {
	dpc.mutation.SetCurrentLong(f)
	return dpc
}

// SetNillableCurrentLong sets the "current_long" field if the given value is not nil.
func (dpc *DriverProfileCreate) SetNillableCurrentLong(f *float64) *DriverProfileCreate {
	if f != nil {
		dpc.SetCurrentLong(*f)
	}
	return dpc
}

// SetIsActive sets the "is_active" field.
func (dpc *DriverProfileCreate) SetIsActive(b bool) *DriverProfileCreate {
	dpc.mutation.SetIsActive(b)
	return dpc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (dpc *DriverProfileCreate) SetNillableIsActive(b *bool) *DriverProfileCreate {
	if b != nil {
		dpc.SetIsActive(*b)
	}
	return dpc
}

// SetUserID sets the "user_id" field.
func (dpc *DriverProfileCreate) SetUserID(u uuid.UUID) *DriverProfileCreate {
	dpc.mutation.SetUserID(u)
	return dpc
}

// SetID sets the "id" field.
func (dpc *DriverProfileCreate) SetID(u uuid.UUID) *DriverProfileCreate {
	dpc.mutation.SetID(u)
	return dpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dpc *DriverProfileCreate) SetNillableID(u *uuid.UUID) *DriverProfileCreate {
	if u != nil {
		dpc.SetID(*u)
	}
	return dpc
}

// SetUser sets the "user" edge to the User entity.
func (dpc *DriverProfileCreate) SetUser(u *User) *DriverProfileCreate {
	return dpc.SetUserID(u.ID)
}

// AddTripsDriverIDs adds the "trips_driver" edge to the Trip entity by IDs.
func (dpc *DriverProfileCreate) AddTripsDriverIDs(ids ...uuid.UUID) *DriverProfileCreate {
	dpc.mutation.AddTripsDriverIDs(ids...)
	return dpc
}

// AddTripsDriver adds the "trips_driver" edges to the Trip entity.
func (dpc *DriverProfileCreate) AddTripsDriver(t ...*Trip) *DriverProfileCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dpc.AddTripsDriverIDs(ids...)
}

// Mutation returns the DriverProfileMutation object of the builder.
func (dpc *DriverProfileCreate) Mutation() *DriverProfileMutation {
	return dpc.mutation
}

// Save creates the DriverProfile in the database.
func (dpc *DriverProfileCreate) Save(ctx context.Context) (*DriverProfile, error) {
	dpc.defaults()
	return withHooks(ctx, dpc.sqlSave, dpc.mutation, dpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DriverProfileCreate) SaveX(ctx context.Context) *DriverProfile {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DriverProfileCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DriverProfileCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpc *DriverProfileCreate) defaults() {
	if _, ok := dpc.mutation.Status(); !ok {
		v := driverprofile.DefaultStatus
		dpc.mutation.SetStatus(v)
	}
	if _, ok := dpc.mutation.IsActive(); !ok {
		v := driverprofile.DefaultIsActive
		dpc.mutation.SetIsActive(v)
	}
	if _, ok := dpc.mutation.ID(); !ok {
		v := driverprofile.DefaultID()
		dpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DriverProfileCreate) check() error {
	if _, ok := dpc.mutation.LicenseNumber(); !ok {
		return &ValidationError{Name: "license_number", err: errors.New(`ent: missing required field "DriverProfile.license_number"`)}
	}
	if _, ok := dpc.mutation.KtpNumber(); !ok {
		return &ValidationError{Name: "ktp_number", err: errors.New(`ent: missing required field "DriverProfile.ktp_number"`)}
	}
	if _, ok := dpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "DriverProfile.status"`)}
	}
	if v, ok := dpc.mutation.Status(); ok {
		if err := driverprofile.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "DriverProfile.status": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.VehicleInfo(); !ok {
		return &ValidationError{Name: "vehicle_info", err: errors.New(`ent: missing required field "DriverProfile.vehicle_info"`)}
	}
	if _, ok := dpc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "DriverProfile.is_active"`)}
	}
	if _, ok := dpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "DriverProfile.user_id"`)}
	}
	if len(dpc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "DriverProfile.user"`)}
	}
	return nil
}

func (dpc *DriverProfileCreate) sqlSave(ctx context.Context) (*DriverProfile, error) {
	if err := dpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dpc.mutation.id = &_node.ID
	dpc.mutation.done = true
	return _node, nil
}

func (dpc *DriverProfileCreate) createSpec() (*DriverProfile, *sqlgraph.CreateSpec) {
	var (
		_node = &DriverProfile{config: dpc.config}
		_spec = sqlgraph.NewCreateSpec(driverprofile.Table, sqlgraph.NewFieldSpec(driverprofile.FieldID, field.TypeUUID))
	)
	if id, ok := dpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dpc.mutation.LicenseNumber(); ok {
		_spec.SetField(driverprofile.FieldLicenseNumber, field.TypeString, value)
		_node.LicenseNumber = value
	}
	if value, ok := dpc.mutation.KtpNumber(); ok {
		_spec.SetField(driverprofile.FieldKtpNumber, field.TypeString, value)
		_node.KtpNumber = value
	}
	if value, ok := dpc.mutation.Status(); ok {
		_spec.SetField(driverprofile.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := dpc.mutation.VehicleInfo(); ok {
		_spec.SetField(driverprofile.FieldVehicleInfo, field.TypeString, value)
		_node.VehicleInfo = value
	}
	if value, ok := dpc.mutation.CurrentLat(); ok {
		_spec.SetField(driverprofile.FieldCurrentLat, field.TypeFloat64, value)
		_node.CurrentLat = &value
	}
	if value, ok := dpc.mutation.CurrentLong(); ok {
		_spec.SetField(driverprofile.FieldCurrentLong, field.TypeFloat64, value)
		_node.CurrentLong = &value
	}
	if value, ok := dpc.mutation.IsActive(); ok {
		_spec.SetField(driverprofile.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if nodes := dpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   driverprofile.UserTable,
			Columns: []string{driverprofile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.TripsDriverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   driverprofile.TripsDriverTable,
			Columns: []string{driverprofile.TripsDriverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DriverProfileCreateBulk is the builder for creating many DriverProfile entities in bulk.
type DriverProfileCreateBulk struct {
	config
	err      error
	builders []*DriverProfileCreate
}

// Save creates the DriverProfile entities in the database.
func (dpcb *DriverProfileCreateBulk) Save(ctx context.Context) ([]*DriverProfile, error) {
	if dpcb.err != nil {
		return nil, dpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DriverProfile, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DriverProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DriverProfileCreateBulk) SaveX(ctx context.Context) []*DriverProfile {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DriverProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DriverProfileCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
