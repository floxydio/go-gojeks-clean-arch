// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gojeksrepo/ent/usersadmin"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UsersAdminCreate is the builder for creating a UsersAdmin entity.
type UsersAdminCreate struct {
	config
	mutation *UsersAdminMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (uac *UsersAdminCreate) SetName(s string) *UsersAdminCreate {
	uac.mutation.SetName(s)
	return uac
}

// SetUsername sets the "username" field.
func (uac *UsersAdminCreate) SetUsername(s string) *UsersAdminCreate {
	uac.mutation.SetUsername(s)
	return uac
}

// SetPassword sets the "password" field.
func (uac *UsersAdminCreate) SetPassword(s string) *UsersAdminCreate {
	uac.mutation.SetPassword(s)
	return uac
}

// SetStatusAdmin sets the "status_admin" field.
func (uac *UsersAdminCreate) SetStatusAdmin(i int) *UsersAdminCreate {
	uac.mutation.SetStatusAdmin(i)
	return uac
}

// SetNillableStatusAdmin sets the "status_admin" field if the given value is not nil.
func (uac *UsersAdminCreate) SetNillableStatusAdmin(i *int) *UsersAdminCreate {
	if i != nil {
		uac.SetStatusAdmin(*i)
	}
	return uac
}

// SetID sets the "id" field.
func (uac *UsersAdminCreate) SetID(u uuid.UUID) *UsersAdminCreate {
	uac.mutation.SetID(u)
	return uac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uac *UsersAdminCreate) SetNillableID(u *uuid.UUID) *UsersAdminCreate {
	if u != nil {
		uac.SetID(*u)
	}
	return uac
}

// Mutation returns the UsersAdminMutation object of the builder.
func (uac *UsersAdminCreate) Mutation() *UsersAdminMutation {
	return uac.mutation
}

// Save creates the UsersAdmin in the database.
func (uac *UsersAdminCreate) Save(ctx context.Context) (*UsersAdmin, error) {
	uac.defaults()
	return withHooks(ctx, uac.sqlSave, uac.mutation, uac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UsersAdminCreate) SaveX(ctx context.Context) *UsersAdmin {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uac *UsersAdminCreate) Exec(ctx context.Context) error {
	_, err := uac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uac *UsersAdminCreate) ExecX(ctx context.Context) {
	if err := uac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uac *UsersAdminCreate) defaults() {
	if _, ok := uac.mutation.StatusAdmin(); !ok {
		v := usersadmin.DefaultStatusAdmin
		uac.mutation.SetStatusAdmin(v)
	}
	if _, ok := uac.mutation.ID(); !ok {
		v := usersadmin.DefaultID()
		uac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uac *UsersAdminCreate) check() error {
	if _, ok := uac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UsersAdmin.name"`)}
	}
	if v, ok := uac.mutation.Name(); ok {
		if err := usersadmin.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "UsersAdmin.name": %w`, err)}
		}
	}
	if _, ok := uac.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "UsersAdmin.username"`)}
	}
	if v, ok := uac.mutation.Username(); ok {
		if err := usersadmin.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "UsersAdmin.username": %w`, err)}
		}
	}
	if _, ok := uac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "UsersAdmin.password"`)}
	}
	if v, ok := uac.mutation.Password(); ok {
		if err := usersadmin.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "UsersAdmin.password": %w`, err)}
		}
	}
	if _, ok := uac.mutation.StatusAdmin(); !ok {
		return &ValidationError{Name: "status_admin", err: errors.New(`ent: missing required field "UsersAdmin.status_admin"`)}
	}
	return nil
}

func (uac *UsersAdminCreate) sqlSave(ctx context.Context) (*UsersAdmin, error) {
	if err := uac.check(); err != nil {
		return nil, err
	}
	_node, _spec := uac.createSpec()
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uac.mutation.id = &_node.ID
	uac.mutation.done = true
	return _node, nil
}

func (uac *UsersAdminCreate) createSpec() (*UsersAdmin, *sqlgraph.CreateSpec) {
	var (
		_node = &UsersAdmin{config: uac.config}
		_spec = sqlgraph.NewCreateSpec(usersadmin.Table, sqlgraph.NewFieldSpec(usersadmin.FieldID, field.TypeUUID))
	)
	if id, ok := uac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uac.mutation.Name(); ok {
		_spec.SetField(usersadmin.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uac.mutation.Username(); ok {
		_spec.SetField(usersadmin.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := uac.mutation.Password(); ok {
		_spec.SetField(usersadmin.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uac.mutation.StatusAdmin(); ok {
		_spec.SetField(usersadmin.FieldStatusAdmin, field.TypeInt, value)
		_node.StatusAdmin = value
	}
	return _node, _spec
}

// UsersAdminCreateBulk is the builder for creating many UsersAdmin entities in bulk.
type UsersAdminCreateBulk struct {
	config
	err      error
	builders []*UsersAdminCreate
}

// Save creates the UsersAdmin entities in the database.
func (uacb *UsersAdminCreateBulk) Save(ctx context.Context) ([]*UsersAdmin, error) {
	if uacb.err != nil {
		return nil, uacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uacb.builders))
	nodes := make([]*UsersAdmin, len(uacb.builders))
	mutators := make([]Mutator, len(uacb.builders))
	for i := range uacb.builders {
		func(i int, root context.Context) {
			builder := uacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsersAdminMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uacb *UsersAdminCreateBulk) SaveX(ctx context.Context) []*UsersAdmin {
	v, err := uacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uacb *UsersAdminCreateBulk) Exec(ctx context.Context) error {
	_, err := uacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uacb *UsersAdminCreateBulk) ExecX(ctx context.Context) {
	if err := uacb.Exec(ctx); err != nil {
		panic(err)
	}
}
