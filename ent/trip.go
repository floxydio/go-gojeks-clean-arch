// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Trip is the model entity for the Trip schema.
type Trip struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// DriverID holds the value of the "driver_id" field.
	DriverID *uuid.UUID `json:"driver_id,omitempty"`
	// PickupLat holds the value of the "pickup_lat" field.
	PickupLat float64 `json:"pickup_lat,omitempty"`
	// PickupLong holds the value of the "pickup_long" field.
	PickupLong float64 `json:"pickup_long,omitempty"`
	// DropLat holds the value of the "drop_lat" field.
	DropLat float64 `json:"drop_lat,omitempty"`
	// DropLong holds the value of the "drop_long" field.
	DropLong float64 `json:"drop_long,omitempty"`
	// Status holds the value of the "status" field.
	Status trip.Status `json:"status,omitempty"`
	// DistanceKm holds the value of the "distance_km" field.
	DistanceKm float64 `json:"distance_km,omitempty"`
	// Numeric holds the value of the "numeric" field.
	Numeric string `json:"numeric,omitempty"`
	// IsPaid holds the value of the "is_paid" field.
	IsPaid bool `json:"is_paid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TripQuery when eager-loading is set.
	Edges                       TripEdges `json:"edges"`
	driver_profile_trips_driver *uuid.UUID
	selectValues                sql.SelectValues
}

// TripEdges holds the relations/edges for other nodes in the graph.
type TripEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Driver holds the value of the driver edge.
	Driver *User `json:"driver,omitempty"`
	// Payment holds the value of the payment edge.
	Payment []*Payment `json:"payment,omitempty"`
	// Ratings holds the value of the ratings edge.
	Ratings []*TripRating `json:"ratings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TripEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DriverOrErr returns the Driver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TripEdges) DriverOrErr() (*User, error) {
	if e.Driver != nil {
		return e.Driver, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "driver"}
}

// PaymentOrErr returns the Payment value or an error if the edge
// was not loaded in eager-loading.
func (e TripEdges) PaymentOrErr() ([]*Payment, error) {
	if e.loadedTypes[2] {
		return e.Payment, nil
	}
	return nil, &NotLoadedError{edge: "payment"}
}

// RatingsOrErr returns the Ratings value or an error if the edge
// was not loaded in eager-loading.
func (e TripEdges) RatingsOrErr() ([]*TripRating, error) {
	if e.loadedTypes[3] {
		return e.Ratings, nil
	}
	return nil, &NotLoadedError{edge: "ratings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Trip) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trip.FieldDriverID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case trip.FieldIsPaid:
			values[i] = new(sql.NullBool)
		case trip.FieldPickupLat, trip.FieldPickupLong, trip.FieldDropLat, trip.FieldDropLong, trip.FieldDistanceKm:
			values[i] = new(sql.NullFloat64)
		case trip.FieldStatus, trip.FieldNumeric:
			values[i] = new(sql.NullString)
		case trip.FieldCreatedAt, trip.FieldStartedAt, trip.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case trip.FieldID, trip.FieldUserID:
			values[i] = new(uuid.UUID)
		case trip.ForeignKeys[0]: // driver_profile_trips_driver
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Trip fields.
func (t *Trip) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trip.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case trip.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				t.UserID = *value
			}
		case trip.FieldDriverID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field driver_id", values[i])
			} else if value.Valid {
				t.DriverID = new(uuid.UUID)
				*t.DriverID = *value.S.(*uuid.UUID)
			}
		case trip.FieldPickupLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pickup_lat", values[i])
			} else if value.Valid {
				t.PickupLat = value.Float64
			}
		case trip.FieldPickupLong:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pickup_long", values[i])
			} else if value.Valid {
				t.PickupLong = value.Float64
			}
		case trip.FieldDropLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field drop_lat", values[i])
			} else if value.Valid {
				t.DropLat = value.Float64
			}
		case trip.FieldDropLong:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field drop_long", values[i])
			} else if value.Valid {
				t.DropLong = value.Float64
			}
		case trip.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = trip.Status(value.String)
			}
		case trip.FieldDistanceKm:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field distance_km", values[i])
			} else if value.Valid {
				t.DistanceKm = value.Float64
			}
		case trip.FieldNumeric:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field numeric", values[i])
			} else if value.Valid {
				t.Numeric = value.String
			}
		case trip.FieldIsPaid:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_paid", values[i])
			} else if value.Valid {
				t.IsPaid = value.Bool
			}
		case trip.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case trip.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				t.StartedAt = value.Time
			}
		case trip.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				t.CompletedAt = value.Time
			}
		case trip.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field driver_profile_trips_driver", values[i])
			} else if value.Valid {
				t.driver_profile_trips_driver = new(uuid.UUID)
				*t.driver_profile_trips_driver = *value.S.(*uuid.UUID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Trip.
// This includes values selected through modifiers, order, etc.
func (t *Trip) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Trip entity.
func (t *Trip) QueryUser() *UserQuery {
	return NewTripClient(t.config).QueryUser(t)
}

// QueryDriver queries the "driver" edge of the Trip entity.
func (t *Trip) QueryDriver() *UserQuery {
	return NewTripClient(t.config).QueryDriver(t)
}

// QueryPayment queries the "payment" edge of the Trip entity.
func (t *Trip) QueryPayment() *PaymentQuery {
	return NewTripClient(t.config).QueryPayment(t)
}

// QueryRatings queries the "ratings" edge of the Trip entity.
func (t *Trip) QueryRatings() *TripRatingQuery {
	return NewTripClient(t.config).QueryRatings(t)
}

// Update returns a builder for updating this Trip.
// Note that you need to call Trip.Unwrap() before calling this method if this Trip
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Trip) Update() *TripUpdateOne {
	return NewTripClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Trip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Trip) Unwrap() *Trip {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Trip is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Trip) String() string {
	var builder strings.Builder
	builder.WriteString("Trip(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UserID))
	builder.WriteString(", ")
	if v := t.DriverID; v != nil {
		builder.WriteString("driver_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("pickup_lat=")
	builder.WriteString(fmt.Sprintf("%v", t.PickupLat))
	builder.WriteString(", ")
	builder.WriteString("pickup_long=")
	builder.WriteString(fmt.Sprintf("%v", t.PickupLong))
	builder.WriteString(", ")
	builder.WriteString("drop_lat=")
	builder.WriteString(fmt.Sprintf("%v", t.DropLat))
	builder.WriteString(", ")
	builder.WriteString("drop_long=")
	builder.WriteString(fmt.Sprintf("%v", t.DropLong))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("distance_km=")
	builder.WriteString(fmt.Sprintf("%v", t.DistanceKm))
	builder.WriteString(", ")
	builder.WriteString("numeric=")
	builder.WriteString(t.Numeric)
	builder.WriteString(", ")
	builder.WriteString("is_paid=")
	builder.WriteString(fmt.Sprintf("%v", t.IsPaid))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(t.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(t.CompletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Trips is a parsable slice of Trip.
type Trips []*Trip
