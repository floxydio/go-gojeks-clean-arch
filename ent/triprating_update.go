// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gojeksrepo/ent/predicate"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/triprating"
	"gojeksrepo/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TripRatingUpdate is the builder for updating TripRating entities.
type TripRatingUpdate struct {
	config
	hooks    []Hook
	mutation *TripRatingMutation
}

// Where appends a list predicates to the TripRatingUpdate builder.
func (tru *TripRatingUpdate) Where(ps ...predicate.TripRating) *TripRatingUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetTripID sets the "trip_id" field.
func (tru *TripRatingUpdate) SetTripID(u uuid.UUID) *TripRatingUpdate {
	tru.mutation.SetTripID(u)
	return tru
}

// SetNillableTripID sets the "trip_id" field if the given value is not nil.
func (tru *TripRatingUpdate) SetNillableTripID(u *uuid.UUID) *TripRatingUpdate {
	if u != nil {
		tru.SetTripID(*u)
	}
	return tru
}

// SetFromUserID sets the "from_user_id" field.
func (tru *TripRatingUpdate) SetFromUserID(u uuid.UUID) *TripRatingUpdate {
	tru.mutation.SetFromUserID(u)
	return tru
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (tru *TripRatingUpdate) SetNillableFromUserID(u *uuid.UUID) *TripRatingUpdate {
	if u != nil {
		tru.SetFromUserID(*u)
	}
	return tru
}

// SetToUserID sets the "to_user_id" field.
func (tru *TripRatingUpdate) SetToUserID(u uuid.UUID) *TripRatingUpdate {
	tru.mutation.SetToUserID(u)
	return tru
}

// SetNillableToUserID sets the "to_user_id" field if the given value is not nil.
func (tru *TripRatingUpdate) SetNillableToUserID(u *uuid.UUID) *TripRatingUpdate {
	if u != nil {
		tru.SetToUserID(*u)
	}
	return tru
}

// SetRating sets the "rating" field.
func (tru *TripRatingUpdate) SetRating(i int) *TripRatingUpdate {
	tru.mutation.ResetRating()
	tru.mutation.SetRating(i)
	return tru
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (tru *TripRatingUpdate) SetNillableRating(i *int) *TripRatingUpdate {
	if i != nil {
		tru.SetRating(*i)
	}
	return tru
}

// AddRating adds i to the "rating" field.
func (tru *TripRatingUpdate) AddRating(i int) *TripRatingUpdate {
	tru.mutation.AddRating(i)
	return tru
}

// SetComment sets the "comment" field.
func (tru *TripRatingUpdate) SetComment(s string) *TripRatingUpdate {
	tru.mutation.SetComment(s)
	return tru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tru *TripRatingUpdate) SetNillableComment(s *string) *TripRatingUpdate {
	if s != nil {
		tru.SetComment(*s)
	}
	return tru
}

// SetCreatedAt sets the "created_at" field.
func (tru *TripRatingUpdate) SetCreatedAt(t time.Time) *TripRatingUpdate {
	tru.mutation.SetCreatedAt(t)
	return tru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tru *TripRatingUpdate) SetNillableCreatedAt(t *time.Time) *TripRatingUpdate {
	if t != nil {
		tru.SetCreatedAt(*t)
	}
	return tru
}

// SetTrip sets the "trip" edge to the Trip entity.
func (tru *TripRatingUpdate) SetTrip(t *Trip) *TripRatingUpdate {
	return tru.SetTripID(t.ID)
}

// SetFromUser sets the "from_user" edge to the User entity.
func (tru *TripRatingUpdate) SetFromUser(u *User) *TripRatingUpdate {
	return tru.SetFromUserID(u.ID)
}

// SetToUser sets the "to_user" edge to the User entity.
func (tru *TripRatingUpdate) SetToUser(u *User) *TripRatingUpdate {
	return tru.SetToUserID(u.ID)
}

// Mutation returns the TripRatingMutation object of the builder.
func (tru *TripRatingUpdate) Mutation() *TripRatingMutation {
	return tru.mutation
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (tru *TripRatingUpdate) ClearTrip() *TripRatingUpdate {
	tru.mutation.ClearTrip()
	return tru
}

// ClearFromUser clears the "from_user" edge to the User entity.
func (tru *TripRatingUpdate) ClearFromUser() *TripRatingUpdate {
	tru.mutation.ClearFromUser()
	return tru
}

// ClearToUser clears the "to_user" edge to the User entity.
func (tru *TripRatingUpdate) ClearToUser() *TripRatingUpdate {
	tru.mutation.ClearToUser()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TripRatingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TripRatingUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TripRatingUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TripRatingUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TripRatingUpdate) check() error {
	if tru.mutation.TripCleared() && len(tru.mutation.TripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TripRating.trip"`)
	}
	if tru.mutation.FromUserCleared() && len(tru.mutation.FromUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TripRating.from_user"`)
	}
	if tru.mutation.ToUserCleared() && len(tru.mutation.ToUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TripRating.to_user"`)
	}
	return nil
}

func (tru *TripRatingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(triprating.Table, triprating.Columns, sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.Rating(); ok {
		_spec.SetField(triprating.FieldRating, field.TypeInt, value)
	}
	if value, ok := tru.mutation.AddedRating(); ok {
		_spec.AddField(triprating.FieldRating, field.TypeInt, value)
	}
	if value, ok := tru.mutation.Comment(); ok {
		_spec.SetField(triprating.FieldComment, field.TypeString, value)
	}
	if value, ok := tru.mutation.CreatedAt(); ok {
		_spec.SetField(triprating.FieldCreatedAt, field.TypeTime, value)
	}
	if tru.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.TripTable,
			Columns: []string{triprating.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.TripTable,
			Columns: []string{triprating.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.FromUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.FromUserTable,
			Columns: []string{triprating.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.FromUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.FromUserTable,
			Columns: []string{triprating.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.ToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.ToUserTable,
			Columns: []string{triprating.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.ToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.ToUserTable,
			Columns: []string{triprating.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{triprating.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TripRatingUpdateOne is the builder for updating a single TripRating entity.
type TripRatingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TripRatingMutation
}

// SetTripID sets the "trip_id" field.
func (truo *TripRatingUpdateOne) SetTripID(u uuid.UUID) *TripRatingUpdateOne {
	truo.mutation.SetTripID(u)
	return truo
}

// SetNillableTripID sets the "trip_id" field if the given value is not nil.
func (truo *TripRatingUpdateOne) SetNillableTripID(u *uuid.UUID) *TripRatingUpdateOne {
	if u != nil {
		truo.SetTripID(*u)
	}
	return truo
}

// SetFromUserID sets the "from_user_id" field.
func (truo *TripRatingUpdateOne) SetFromUserID(u uuid.UUID) *TripRatingUpdateOne {
	truo.mutation.SetFromUserID(u)
	return truo
}

// SetNillableFromUserID sets the "from_user_id" field if the given value is not nil.
func (truo *TripRatingUpdateOne) SetNillableFromUserID(u *uuid.UUID) *TripRatingUpdateOne {
	if u != nil {
		truo.SetFromUserID(*u)
	}
	return truo
}

// SetToUserID sets the "to_user_id" field.
func (truo *TripRatingUpdateOne) SetToUserID(u uuid.UUID) *TripRatingUpdateOne {
	truo.mutation.SetToUserID(u)
	return truo
}

// SetNillableToUserID sets the "to_user_id" field if the given value is not nil.
func (truo *TripRatingUpdateOne) SetNillableToUserID(u *uuid.UUID) *TripRatingUpdateOne {
	if u != nil {
		truo.SetToUserID(*u)
	}
	return truo
}

// SetRating sets the "rating" field.
func (truo *TripRatingUpdateOne) SetRating(i int) *TripRatingUpdateOne {
	truo.mutation.ResetRating()
	truo.mutation.SetRating(i)
	return truo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (truo *TripRatingUpdateOne) SetNillableRating(i *int) *TripRatingUpdateOne {
	if i != nil {
		truo.SetRating(*i)
	}
	return truo
}

// AddRating adds i to the "rating" field.
func (truo *TripRatingUpdateOne) AddRating(i int) *TripRatingUpdateOne {
	truo.mutation.AddRating(i)
	return truo
}

// SetComment sets the "comment" field.
func (truo *TripRatingUpdateOne) SetComment(s string) *TripRatingUpdateOne {
	truo.mutation.SetComment(s)
	return truo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (truo *TripRatingUpdateOne) SetNillableComment(s *string) *TripRatingUpdateOne {
	if s != nil {
		truo.SetComment(*s)
	}
	return truo
}

// SetCreatedAt sets the "created_at" field.
func (truo *TripRatingUpdateOne) SetCreatedAt(t time.Time) *TripRatingUpdateOne {
	truo.mutation.SetCreatedAt(t)
	return truo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (truo *TripRatingUpdateOne) SetNillableCreatedAt(t *time.Time) *TripRatingUpdateOne {
	if t != nil {
		truo.SetCreatedAt(*t)
	}
	return truo
}

// SetTrip sets the "trip" edge to the Trip entity.
func (truo *TripRatingUpdateOne) SetTrip(t *Trip) *TripRatingUpdateOne {
	return truo.SetTripID(t.ID)
}

// SetFromUser sets the "from_user" edge to the User entity.
func (truo *TripRatingUpdateOne) SetFromUser(u *User) *TripRatingUpdateOne {
	return truo.SetFromUserID(u.ID)
}

// SetToUser sets the "to_user" edge to the User entity.
func (truo *TripRatingUpdateOne) SetToUser(u *User) *TripRatingUpdateOne {
	return truo.SetToUserID(u.ID)
}

// Mutation returns the TripRatingMutation object of the builder.
func (truo *TripRatingUpdateOne) Mutation() *TripRatingMutation {
	return truo.mutation
}

// ClearTrip clears the "trip" edge to the Trip entity.
func (truo *TripRatingUpdateOne) ClearTrip() *TripRatingUpdateOne {
	truo.mutation.ClearTrip()
	return truo
}

// ClearFromUser clears the "from_user" edge to the User entity.
func (truo *TripRatingUpdateOne) ClearFromUser() *TripRatingUpdateOne {
	truo.mutation.ClearFromUser()
	return truo
}

// ClearToUser clears the "to_user" edge to the User entity.
func (truo *TripRatingUpdateOne) ClearToUser() *TripRatingUpdateOne {
	truo.mutation.ClearToUser()
	return truo
}

// Where appends a list predicates to the TripRatingUpdate builder.
func (truo *TripRatingUpdateOne) Where(ps ...predicate.TripRating) *TripRatingUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TripRatingUpdateOne) Select(field string, fields ...string) *TripRatingUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TripRating entity.
func (truo *TripRatingUpdateOne) Save(ctx context.Context) (*TripRating, error) {
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TripRatingUpdateOne) SaveX(ctx context.Context) *TripRating {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TripRatingUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TripRatingUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TripRatingUpdateOne) check() error {
	if truo.mutation.TripCleared() && len(truo.mutation.TripIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TripRating.trip"`)
	}
	if truo.mutation.FromUserCleared() && len(truo.mutation.FromUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TripRating.from_user"`)
	}
	if truo.mutation.ToUserCleared() && len(truo.mutation.ToUserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TripRating.to_user"`)
	}
	return nil
}

func (truo *TripRatingUpdateOne) sqlSave(ctx context.Context) (_node *TripRating, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(triprating.Table, triprating.Columns, sqlgraph.NewFieldSpec(triprating.FieldID, field.TypeUUID))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TripRating.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, triprating.FieldID)
		for _, f := range fields {
			if !triprating.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != triprating.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.Rating(); ok {
		_spec.SetField(triprating.FieldRating, field.TypeInt, value)
	}
	if value, ok := truo.mutation.AddedRating(); ok {
		_spec.AddField(triprating.FieldRating, field.TypeInt, value)
	}
	if value, ok := truo.mutation.Comment(); ok {
		_spec.SetField(triprating.FieldComment, field.TypeString, value)
	}
	if value, ok := truo.mutation.CreatedAt(); ok {
		_spec.SetField(triprating.FieldCreatedAt, field.TypeTime, value)
	}
	if truo.mutation.TripCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.TripTable,
			Columns: []string{triprating.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TripIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.TripTable,
			Columns: []string{triprating.TripColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trip.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.FromUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.FromUserTable,
			Columns: []string{triprating.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.FromUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.FromUserTable,
			Columns: []string{triprating.FromUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.ToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.ToUserTable,
			Columns: []string{triprating.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.ToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   triprating.ToUserTable,
			Columns: []string{triprating.ToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TripRating{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{triprating.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
