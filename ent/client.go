// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"gojeksrepo/ent/migrate"

	"gojeksrepo/ent/driverprofile"
	"gojeksrepo/ent/payment"
	"gojeksrepo/ent/trip"
	"gojeksrepo/ent/triprating"
	"gojeksrepo/ent/user"
	"gojeksrepo/ent/usersadmin"
	"gojeksrepo/ent/wallet"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DriverProfile is the client for interacting with the DriverProfile builders.
	DriverProfile *DriverProfileClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// Trip is the client for interacting with the Trip builders.
	Trip *TripClient
	// TripRating is the client for interacting with the TripRating builders.
	TripRating *TripRatingClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UsersAdmin is the client for interacting with the UsersAdmin builders.
	UsersAdmin *UsersAdminClient
	// Wallet is the client for interacting with the Wallet builders.
	Wallet *WalletClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DriverProfile = NewDriverProfileClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.Trip = NewTripClient(c.config)
	c.TripRating = NewTripRatingClient(c.config)
	c.User = NewUserClient(c.config)
	c.UsersAdmin = NewUsersAdminClient(c.config)
	c.Wallet = NewWalletClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		DriverProfile: NewDriverProfileClient(cfg),
		Payment:       NewPaymentClient(cfg),
		Trip:          NewTripClient(cfg),
		TripRating:    NewTripRatingClient(cfg),
		User:          NewUserClient(cfg),
		UsersAdmin:    NewUsersAdminClient(cfg),
		Wallet:        NewWalletClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		DriverProfile: NewDriverProfileClient(cfg),
		Payment:       NewPaymentClient(cfg),
		Trip:          NewTripClient(cfg),
		TripRating:    NewTripRatingClient(cfg),
		User:          NewUserClient(cfg),
		UsersAdmin:    NewUsersAdminClient(cfg),
		Wallet:        NewWalletClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DriverProfile.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.DriverProfile, c.Payment, c.Trip, c.TripRating, c.User, c.UsersAdmin,
		c.Wallet,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.DriverProfile, c.Payment, c.Trip, c.TripRating, c.User, c.UsersAdmin,
		c.Wallet,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *DriverProfileMutation:
		return c.DriverProfile.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *TripMutation:
		return c.Trip.mutate(ctx, m)
	case *TripRatingMutation:
		return c.TripRating.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UsersAdminMutation:
		return c.UsersAdmin.mutate(ctx, m)
	case *WalletMutation:
		return c.Wallet.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// DriverProfileClient is a client for the DriverProfile schema.
type DriverProfileClient struct {
	config
}

// NewDriverProfileClient returns a client for the DriverProfile from the given config.
func NewDriverProfileClient(c config) *DriverProfileClient {
	return &DriverProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `driverprofile.Hooks(f(g(h())))`.
func (c *DriverProfileClient) Use(hooks ...Hook) {
	c.hooks.DriverProfile = append(c.hooks.DriverProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `driverprofile.Intercept(f(g(h())))`.
func (c *DriverProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.DriverProfile = append(c.inters.DriverProfile, interceptors...)
}

// Create returns a builder for creating a DriverProfile entity.
func (c *DriverProfileClient) Create() *DriverProfileCreate {
	mutation := newDriverProfileMutation(c.config, OpCreate)
	return &DriverProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DriverProfile entities.
func (c *DriverProfileClient) CreateBulk(builders ...*DriverProfileCreate) *DriverProfileCreateBulk {
	return &DriverProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DriverProfileClient) MapCreateBulk(slice any, setFunc func(*DriverProfileCreate, int)) *DriverProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DriverProfileCreateBulk{err: fmt.Errorf("calling to DriverProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DriverProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DriverProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DriverProfile.
func (c *DriverProfileClient) Update() *DriverProfileUpdate {
	mutation := newDriverProfileMutation(c.config, OpUpdate)
	return &DriverProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DriverProfileClient) UpdateOne(dp *DriverProfile) *DriverProfileUpdateOne {
	mutation := newDriverProfileMutation(c.config, OpUpdateOne, withDriverProfile(dp))
	return &DriverProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DriverProfileClient) UpdateOneID(id uuid.UUID) *DriverProfileUpdateOne {
	mutation := newDriverProfileMutation(c.config, OpUpdateOne, withDriverProfileID(id))
	return &DriverProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DriverProfile.
func (c *DriverProfileClient) Delete() *DriverProfileDelete {
	mutation := newDriverProfileMutation(c.config, OpDelete)
	return &DriverProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DriverProfileClient) DeleteOne(dp *DriverProfile) *DriverProfileDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DriverProfileClient) DeleteOneID(id uuid.UUID) *DriverProfileDeleteOne {
	builder := c.Delete().Where(driverprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DriverProfileDeleteOne{builder}
}

// Query returns a query builder for DriverProfile.
func (c *DriverProfileClient) Query() *DriverProfileQuery {
	return &DriverProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDriverProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a DriverProfile entity by its id.
func (c *DriverProfileClient) Get(ctx context.Context, id uuid.UUID) (*DriverProfile, error) {
	return c.Query().Where(driverprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DriverProfileClient) GetX(ctx context.Context, id uuid.UUID) *DriverProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a DriverProfile.
func (c *DriverProfileClient) QueryUser(dp *DriverProfile) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(driverprofile.Table, driverprofile.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, driverprofile.UserTable, driverprofile.UserColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTripsDriver queries the trips_driver edge of a DriverProfile.
func (c *DriverProfileClient) QueryTripsDriver(dp *DriverProfile) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(driverprofile.Table, driverprofile.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, driverprofile.TripsDriverTable, driverprofile.TripsDriverColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DriverProfileClient) Hooks() []Hook {
	return c.hooks.DriverProfile
}

// Interceptors returns the client interceptors.
func (c *DriverProfileClient) Interceptors() []Interceptor {
	return c.inters.DriverProfile
}

func (c *DriverProfileClient) mutate(ctx context.Context, m *DriverProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DriverProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DriverProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DriverProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DriverProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DriverProfile mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentClient) MapCreateBulk(slice any, setFunc func(*PaymentCreate, int)) *PaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentCreateBulk{err: fmt.Errorf("calling to PaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id uuid.UUID) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id uuid.UUID) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id uuid.UUID) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id uuid.UUID) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrip queries the trip edge of a Payment.
func (c *PaymentClient) QueryTrip(pa *Payment) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.TripTable, payment.TripColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Payment.
func (c *PaymentClient) QueryUser(pa *Payment) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(payment.Table, payment.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, payment.UserTable, payment.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Payment mutation op: %q", m.Op())
	}
}

// TripClient is a client for the Trip schema.
type TripClient struct {
	config
}

// NewTripClient returns a client for the Trip from the given config.
func NewTripClient(c config) *TripClient {
	return &TripClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trip.Hooks(f(g(h())))`.
func (c *TripClient) Use(hooks ...Hook) {
	c.hooks.Trip = append(c.hooks.Trip, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trip.Intercept(f(g(h())))`.
func (c *TripClient) Intercept(interceptors ...Interceptor) {
	c.inters.Trip = append(c.inters.Trip, interceptors...)
}

// Create returns a builder for creating a Trip entity.
func (c *TripClient) Create() *TripCreate {
	mutation := newTripMutation(c.config, OpCreate)
	return &TripCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Trip entities.
func (c *TripClient) CreateBulk(builders ...*TripCreate) *TripCreateBulk {
	return &TripCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TripClient) MapCreateBulk(slice any, setFunc func(*TripCreate, int)) *TripCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TripCreateBulk{err: fmt.Errorf("calling to TripClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TripCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TripCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Trip.
func (c *TripClient) Update() *TripUpdate {
	mutation := newTripMutation(c.config, OpUpdate)
	return &TripUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TripClient) UpdateOne(t *Trip) *TripUpdateOne {
	mutation := newTripMutation(c.config, OpUpdateOne, withTrip(t))
	return &TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TripClient) UpdateOneID(id uuid.UUID) *TripUpdateOne {
	mutation := newTripMutation(c.config, OpUpdateOne, withTripID(id))
	return &TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Trip.
func (c *TripClient) Delete() *TripDelete {
	mutation := newTripMutation(c.config, OpDelete)
	return &TripDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TripClient) DeleteOne(t *Trip) *TripDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TripClient) DeleteOneID(id uuid.UUID) *TripDeleteOne {
	builder := c.Delete().Where(trip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TripDeleteOne{builder}
}

// Query returns a query builder for Trip.
func (c *TripClient) Query() *TripQuery {
	return &TripQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrip},
		inters: c.Interceptors(),
	}
}

// Get returns a Trip entity by its id.
func (c *TripClient) Get(ctx context.Context, id uuid.UUID) (*Trip, error) {
	return c.Query().Where(trip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TripClient) GetX(ctx context.Context, id uuid.UUID) *Trip {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Trip.
func (c *TripClient) QueryUser(t *Trip) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trip.UserTable, trip.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDriver queries the driver edge of a Trip.
func (c *TripClient) QueryDriver(t *Trip) *DriverProfileQuery {
	query := (&DriverProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(driverprofile.Table, driverprofile.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trip.DriverTable, trip.DriverColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayment queries the payment edge of a Trip.
func (c *TripClient) QueryPayment(t *Trip) *PaymentQuery {
	query := (&PaymentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, trip.PaymentTable, trip.PaymentColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRatings queries the ratings edge of a Trip.
func (c *TripClient) QueryRatings(t *Trip) *TripRatingQuery {
	query := (&TripRatingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trip.Table, trip.FieldID, id),
			sqlgraph.To(triprating.Table, triprating.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, trip.RatingsTable, trip.RatingsColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TripClient) Hooks() []Hook {
	return c.hooks.Trip
}

// Interceptors returns the client interceptors.
func (c *TripClient) Interceptors() []Interceptor {
	return c.inters.Trip
}

func (c *TripClient) mutate(ctx context.Context, m *TripMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TripCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TripUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TripUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TripDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Trip mutation op: %q", m.Op())
	}
}

// TripRatingClient is a client for the TripRating schema.
type TripRatingClient struct {
	config
}

// NewTripRatingClient returns a client for the TripRating from the given config.
func NewTripRatingClient(c config) *TripRatingClient {
	return &TripRatingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `triprating.Hooks(f(g(h())))`.
func (c *TripRatingClient) Use(hooks ...Hook) {
	c.hooks.TripRating = append(c.hooks.TripRating, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `triprating.Intercept(f(g(h())))`.
func (c *TripRatingClient) Intercept(interceptors ...Interceptor) {
	c.inters.TripRating = append(c.inters.TripRating, interceptors...)
}

// Create returns a builder for creating a TripRating entity.
func (c *TripRatingClient) Create() *TripRatingCreate {
	mutation := newTripRatingMutation(c.config, OpCreate)
	return &TripRatingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TripRating entities.
func (c *TripRatingClient) CreateBulk(builders ...*TripRatingCreate) *TripRatingCreateBulk {
	return &TripRatingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TripRatingClient) MapCreateBulk(slice any, setFunc func(*TripRatingCreate, int)) *TripRatingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TripRatingCreateBulk{err: fmt.Errorf("calling to TripRatingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TripRatingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TripRatingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TripRating.
func (c *TripRatingClient) Update() *TripRatingUpdate {
	mutation := newTripRatingMutation(c.config, OpUpdate)
	return &TripRatingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TripRatingClient) UpdateOne(tr *TripRating) *TripRatingUpdateOne {
	mutation := newTripRatingMutation(c.config, OpUpdateOne, withTripRating(tr))
	return &TripRatingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TripRatingClient) UpdateOneID(id uuid.UUID) *TripRatingUpdateOne {
	mutation := newTripRatingMutation(c.config, OpUpdateOne, withTripRatingID(id))
	return &TripRatingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TripRating.
func (c *TripRatingClient) Delete() *TripRatingDelete {
	mutation := newTripRatingMutation(c.config, OpDelete)
	return &TripRatingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TripRatingClient) DeleteOne(tr *TripRating) *TripRatingDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TripRatingClient) DeleteOneID(id uuid.UUID) *TripRatingDeleteOne {
	builder := c.Delete().Where(triprating.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TripRatingDeleteOne{builder}
}

// Query returns a query builder for TripRating.
func (c *TripRatingClient) Query() *TripRatingQuery {
	return &TripRatingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTripRating},
		inters: c.Interceptors(),
	}
}

// Get returns a TripRating entity by its id.
func (c *TripRatingClient) Get(ctx context.Context, id uuid.UUID) (*TripRating, error) {
	return c.Query().Where(triprating.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TripRatingClient) GetX(ctx context.Context, id uuid.UUID) *TripRating {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTrip queries the trip edge of a TripRating.
func (c *TripRatingClient) QueryTrip(tr *TripRating) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(triprating.Table, triprating.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triprating.TripTable, triprating.TripColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromUser queries the from_user edge of a TripRating.
func (c *TripRatingClient) QueryFromUser(tr *TripRating) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(triprating.Table, triprating.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triprating.FromUserTable, triprating.FromUserColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToUser queries the to_user edge of a TripRating.
func (c *TripRatingClient) QueryToUser(tr *TripRating) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(triprating.Table, triprating.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triprating.ToUserTable, triprating.ToUserColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TripRatingClient) Hooks() []Hook {
	return c.hooks.TripRating
}

// Interceptors returns the client interceptors.
func (c *TripRatingClient) Interceptors() []Interceptor {
	return c.inters.TripRating
}

func (c *TripRatingClient) mutate(ctx context.Context, m *TripRatingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TripRatingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TripRatingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TripRatingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TripRatingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TripRating mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUserTrips queries the user_trips edge of a User.
func (c *UserClient) QueryUserTrips(u *User) *TripQuery {
	query := (&TripClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(trip.Table, trip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserTripsTable, user.UserTripsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPayments queries the payments edge of a User.
func (c *UserClient) QueryPayments(u *User) *PaymentQuery {
	query := (&PaymentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PaymentsTable, user.PaymentsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserBalance queries the user_balance edge of a User.
func (c *UserClient) QueryUserBalance(u *User) *WalletQuery {
	query := (&WalletClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(wallet.Table, wallet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserBalanceTable, user.UserBalanceColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGivenRatings queries the given_ratings edge of a User.
func (c *UserClient) QueryGivenRatings(u *User) *TripRatingQuery {
	query := (&TripRatingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(triprating.Table, triprating.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GivenRatingsTable, user.GivenRatingsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReceivedRatings queries the received_ratings edge of a User.
func (c *UserClient) QueryReceivedRatings(u *User) *TripRatingQuery {
	query := (&TripRatingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(triprating.Table, triprating.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ReceivedRatingsTable, user.ReceivedRatingsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserDriver queries the user_driver edge of a User.
func (c *UserClient) QueryUserDriver(u *User) *DriverProfileQuery {
	query := (&DriverProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(driverprofile.Table, driverprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserDriverTable, user.UserDriverColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UsersAdminClient is a client for the UsersAdmin schema.
type UsersAdminClient struct {
	config
}

// NewUsersAdminClient returns a client for the UsersAdmin from the given config.
func NewUsersAdminClient(c config) *UsersAdminClient {
	return &UsersAdminClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersadmin.Hooks(f(g(h())))`.
func (c *UsersAdminClient) Use(hooks ...Hook) {
	c.hooks.UsersAdmin = append(c.hooks.UsersAdmin, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersadmin.Intercept(f(g(h())))`.
func (c *UsersAdminClient) Intercept(interceptors ...Interceptor) {
	c.inters.UsersAdmin = append(c.inters.UsersAdmin, interceptors...)
}

// Create returns a builder for creating a UsersAdmin entity.
func (c *UsersAdminClient) Create() *UsersAdminCreate {
	mutation := newUsersAdminMutation(c.config, OpCreate)
	return &UsersAdminCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UsersAdmin entities.
func (c *UsersAdminClient) CreateBulk(builders ...*UsersAdminCreate) *UsersAdminCreateBulk {
	return &UsersAdminCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UsersAdminClient) MapCreateBulk(slice any, setFunc func(*UsersAdminCreate, int)) *UsersAdminCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UsersAdminCreateBulk{err: fmt.Errorf("calling to UsersAdminClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UsersAdminCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UsersAdminCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UsersAdmin.
func (c *UsersAdminClient) Update() *UsersAdminUpdate {
	mutation := newUsersAdminMutation(c.config, OpUpdate)
	return &UsersAdminUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsersAdminClient) UpdateOne(ua *UsersAdmin) *UsersAdminUpdateOne {
	mutation := newUsersAdminMutation(c.config, OpUpdateOne, withUsersAdmin(ua))
	return &UsersAdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsersAdminClient) UpdateOneID(id uuid.UUID) *UsersAdminUpdateOne {
	mutation := newUsersAdminMutation(c.config, OpUpdateOne, withUsersAdminID(id))
	return &UsersAdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UsersAdmin.
func (c *UsersAdminClient) Delete() *UsersAdminDelete {
	mutation := newUsersAdminMutation(c.config, OpDelete)
	return &UsersAdminDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UsersAdminClient) DeleteOne(ua *UsersAdmin) *UsersAdminDeleteOne {
	return c.DeleteOneID(ua.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UsersAdminClient) DeleteOneID(id uuid.UUID) *UsersAdminDeleteOne {
	builder := c.Delete().Where(usersadmin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsersAdminDeleteOne{builder}
}

// Query returns a query builder for UsersAdmin.
func (c *UsersAdminClient) Query() *UsersAdminQuery {
	return &UsersAdminQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUsersAdmin},
		inters: c.Interceptors(),
	}
}

// Get returns a UsersAdmin entity by its id.
func (c *UsersAdminClient) Get(ctx context.Context, id uuid.UUID) (*UsersAdmin, error) {
	return c.Query().Where(usersadmin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsersAdminClient) GetX(ctx context.Context, id uuid.UUID) *UsersAdmin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UsersAdminClient) Hooks() []Hook {
	return c.hooks.UsersAdmin
}

// Interceptors returns the client interceptors.
func (c *UsersAdminClient) Interceptors() []Interceptor {
	return c.inters.UsersAdmin
}

func (c *UsersAdminClient) mutate(ctx context.Context, m *UsersAdminMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UsersAdminCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UsersAdminUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UsersAdminUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UsersAdminDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UsersAdmin mutation op: %q", m.Op())
	}
}

// WalletClient is a client for the Wallet schema.
type WalletClient struct {
	config
}

// NewWalletClient returns a client for the Wallet from the given config.
func NewWalletClient(c config) *WalletClient {
	return &WalletClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `wallet.Hooks(f(g(h())))`.
func (c *WalletClient) Use(hooks ...Hook) {
	c.hooks.Wallet = append(c.hooks.Wallet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `wallet.Intercept(f(g(h())))`.
func (c *WalletClient) Intercept(interceptors ...Interceptor) {
	c.inters.Wallet = append(c.inters.Wallet, interceptors...)
}

// Create returns a builder for creating a Wallet entity.
func (c *WalletClient) Create() *WalletCreate {
	mutation := newWalletMutation(c.config, OpCreate)
	return &WalletCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Wallet entities.
func (c *WalletClient) CreateBulk(builders ...*WalletCreate) *WalletCreateBulk {
	return &WalletCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WalletClient) MapCreateBulk(slice any, setFunc func(*WalletCreate, int)) *WalletCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WalletCreateBulk{err: fmt.Errorf("calling to WalletClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WalletCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WalletCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Wallet.
func (c *WalletClient) Update() *WalletUpdate {
	mutation := newWalletMutation(c.config, OpUpdate)
	return &WalletUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WalletClient) UpdateOne(w *Wallet) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWallet(w))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WalletClient) UpdateOneID(id uuid.UUID) *WalletUpdateOne {
	mutation := newWalletMutation(c.config, OpUpdateOne, withWalletID(id))
	return &WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Wallet.
func (c *WalletClient) Delete() *WalletDelete {
	mutation := newWalletMutation(c.config, OpDelete)
	return &WalletDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WalletClient) DeleteOne(w *Wallet) *WalletDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WalletClient) DeleteOneID(id uuid.UUID) *WalletDeleteOne {
	builder := c.Delete().Where(wallet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WalletDeleteOne{builder}
}

// Query returns a query builder for Wallet.
func (c *WalletClient) Query() *WalletQuery {
	return &WalletQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWallet},
		inters: c.Interceptors(),
	}
}

// Get returns a Wallet entity by its id.
func (c *WalletClient) Get(ctx context.Context, id uuid.UUID) (*Wallet, error) {
	return c.Query().Where(wallet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WalletClient) GetX(ctx context.Context, id uuid.UUID) *Wallet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Wallet.
func (c *WalletClient) QueryUser(w *Wallet) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(wallet.Table, wallet.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, wallet.UserTable, wallet.UserColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WalletClient) Hooks() []Hook {
	return c.hooks.Wallet
}

// Interceptors returns the client interceptors.
func (c *WalletClient) Interceptors() []Interceptor {
	return c.inters.Wallet
}

func (c *WalletClient) mutate(ctx context.Context, m *WalletMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WalletCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WalletUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WalletUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WalletDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Wallet mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		DriverProfile, Payment, Trip, TripRating, User, UsersAdmin, Wallet []ent.Hook
	}
	inters struct {
		DriverProfile, Payment, Trip, TripRating, User, UsersAdmin,
		Wallet []ent.Interceptor
	}
)
